-- Vérifie si getgenv est dispo (certains exécutors ne l'ont pas)
if typeof(getgenv) == "function" then
    if not memorystats then
        memorystats = {}
        memorystats.cache = function(_) end
        memorystats.restore = function(_) end
    end

    local cacheCategories = {
        "Internal","HttpCache","Instances","Signals","Script",
        "PhysicsCollision","PhysicsParts","GraphicsSolidModels","GraphicsMeshParts","GraphicsParticles",
        "GraphicsParts","GraphicsSpatialHash","GraphicsTerrain","GraphicsTexture","GraphicsTextureCharacter",
        "Sounds","StreamingSounds","TerrainVoxels","Gui","Animation","Navigation","GeometryCSG"
    }

    local function cacheAll()
        for _, category in ipairs(cacheCategories) do
            pcall(function()
                memorystats.cache(category)
            end)
        end
    end

    local function restoreAll()
        for _, category in ipairs(cacheCategories) do
            pcall(function()
                memorystats.restore(category)
            end)
        end
    end

    cacheAll()
    task.spawn(function()
        while task.wait(120) do
            cacheAll()
        end
    end)
    getgenv().RestoreMemoryCache = restoreAll
else
    if not memorystats then
        memorystats = {}
        memorystats.cache = function(a) end
        memorystats.restore = function(a) end
    end
    for _, v in pairs({
        "Internal","HttpCache","Instances","Signals","Script",
        "PhysicsCollision","PhysicsParts","GraphicsSolidModels","GraphicsMeshParts","GraphicsParticles",
        "GraphicsParts","GraphicsSpatialHash","GraphicsTerrain","GraphicsTexture","GraphicsTextureCharacter",
        "Sounds","StreamingSounds","TerrainVoxels","Gui","Animation","Navigation","GeometryCSG"
    }) do
        memorystats.cache(v)
    end
end

local XyloKitUI = {}

-- Services
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")

-- URLs des composants (à remplacer par les URLs réelles)
local ComponentLoaders = {
    CreateTab = "https://raw.githubusercontent.com/CheaterOnTop/by-YTBmaxxmaxx_11-roblox-universal-V2/refs/heads/main/tab", -- Remplacer par l'URL réelle
    CreateSection = "https://raw.githubusercontent.com/CheaterOnTop/by-YTBmaxxmaxx_11-roblox-universal-V2/refs/heads/main/section", -- Remplacer par l'URL réelle
    CreateToggle = "https://raw.githubusercontent.com/CheaterOnTop/by-YTBmaxxmaxx_11-roblox-universal-V2/refs/heads/main/toggle", -- Remplacer par l'URL réelle
    CreateSlider = "https://raw.githubusercontent.com/CheaterOnTop/by-YTBmaxxmaxx_11-roblox-universal-V2/refs/heads/main/slider", -- Remplacer par l'URL réelle
    CreateDropdown = "https://raw.githubusercontent.com/CheaterOnTop/by-YTBmaxxmaxx_11-roblox-universal-V2/refs/heads/main/dropdown", -- Remplacer par l'URL réelle
    CreateColorpicker = "https://raw.githubusercontent.com/CheaterOnTop/by-YTBmaxxmaxx_11-roblox-universal-V2/refs/heads/main/color%20picker" -- Remplacer par l'URL réelle
}

-- Attendre que le jeu et le joueur soient chargés
local function waitForGameLoaded()
    if not game:IsLoaded() then
        game.Loaded:Wait()
        task.wait(10)
    end
    local player = Players.LocalPlayer
    if not player then
        Players:GetPropertyChangedSignal("LocalPlayer"):Wait()
        player = Players.LocalPlayer
    end
    return player
end

-- Détection de l'exécuteur
local executor = identifyexecutor and identifyexecutor() or "Unknown"
if executor == "Unknown" then
    game.Players.LocalPlayer:Kick("#UNKNOWN_EXECUTOR_404")
    return
end
print("Exécuteur détecté : " .. executor)

-- Configuration initiale
local player = waitForGameLoaded()
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "XyloKitUI"
screenGui.Parent = game:WaitForChild("CoreGui")
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true

-- Thème
local Themes = {
    Dark = {
        MainBackground = Color3.fromRGB(18, 18, 18),
        TabBackground = Color3.fromRGB(24, 24, 24),
        SectionBackground = Color3.fromRGB(30, 30, 30),
        TextColor = Color3.fromRGB(200, 50, 50),
        TextHoverColor = Color3.fromRGB(220, 80, 80),
        BorderColor = Color3.fromRGB(200, 50, 50),
        SelectedTabColor = Color3.fromRGB(200, 50, 50),
        ButtonBackground = Color3.fromRGB(28, 28, 28),
        ButtonHoverBackground = Color3.fromRGB(40, 40, 40),
        SelectedTabBackground = Color3.fromRGB(36, 36, 36),
        ShadowColor = Color3.fromRGB(0, 0, 0)
    }
}

local currentTheme = Themes.Dark
XyloKitUI.CurrentTheme = currentTheme -- Rendre le thème accessible aux composants

-- Gestion de la configuration
local config = {}
local configFileName = "XyloKitUI_Config.json"

local function saveConfig()
    local success, encoded = pcall(HttpService.JSONEncode, HttpService, config)
    if success then
        writefile(configFileName, encoded)
    end
end

local function loadConfig()
    if isfile(configFileName) then
        local success, decoded = pcall(HttpService.JSONDecode, HttpService, readfile(configFileName))
        if success then
            config = decoded
        end
    end
end

loadConfig()
XyloKitUI.Config = config -- Rendre la config accessible aux composants
XyloKitUI.SaveConfig = saveConfig -- Rendre la fonction saveConfig accessible

-- Charger les composants dynamiquement
local function loadComponent(componentName)
    local url = ComponentLoaders[componentName]
    if url == "URL_" .. componentName then
        warn("URL pour " .. componentName .. " non définie. Veuillez fournir une URL valide.")
        return nil
    end
    local success, result = pcall(function()
        return loadstring(game:HttpGet(url))()
    end)
    if success then
        return result
    else
        warn("Échec du chargement du composant " .. componentName .. " : " .. tostring(result))
        return nil
    end
end

-- Création de la fenêtre principale
function XyloKitUI:CreateWindow(title)
    print("Création de la fenêtre : " .. title)
    local XyloKitUIWindow = {}
    XyloKitUIWindow.Configuration = config
    XyloKitUIWindow.MainFrame = nil

    -- Fond principal
    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 1000, 0, 700)
    mainFrame.Position = UDim2.new(0.5, -500, 0.5, -350)
    mainFrame.BackgroundColor3 = currentTheme.MainBackground
    mainFrame.BorderSizePixel = 0
    mainFrame.ClipsDescendants = true
    mainFrame.Parent = screenGui
    XyloKitUIWindow.MainFrame = mainFrame

    local mainFrameStroke = Instance.new("UIStroke")
    mainFrameStroke.Thickness = 2
    mainFrameStroke.Color = currentTheme.BorderColor
    mainFrameStroke.Parent = mainFrame

    if config.WindowPosition then
        mainFrame.Position = UDim2.new(0.5, config.WindowPosition.X, 0.5, config.WindowPosition.Y)
    end

    -- Animation d'ouverture
    mainFrame.Position = UDim2.new(0.5, mainFrame.Position.X.Offset, -0.5, 0)
    local tweenOpen = TweenService:Create(mainFrame, TweenInfo.new(0.6, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Position = UDim2.new(0.5, mainFrame.Position.X.Offset, 0.5, -350)})
    tweenOpen:Play()

    -- Titre
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -180, 0, 50)
    titleLabel.Position = UDim2.new(0, 180, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.TextColor3 = currentTheme.TextColor
    titleLabel.TextSize = 24
    titleLabel.Font = Enum.Font.Code
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = mainFrame

    -- Barre latérale pour les onglets
    local tabBar = Instance.new("Frame")
    tabBar.Size = UDim2.new(0, 200, 1, -50)
    tabBar.Position = UDim2.new(0, 0, 0, 50)
    tabBar.BackgroundColor3 = currentTheme.TabBackground
    tabBar.BorderSizePixel = 0
    tabBar.Parent = mainFrame

    local tabBarStroke = Instance.new("UIStroke")
    tabBarStroke.Thickness = 2
    tabBarStroke.Color = currentTheme.BorderColor
    tabBarStroke.Parent = tabBar

    local tabBarLayout = Instance.new("UIListLayout")
    tabBarLayout.FillDirection = Enum.FillDirection.Vertical
    tabBarLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabBarLayout.Padding = UDim.new(0, 8)
    tabBarLayout.Parent = tabBar

    -- Zone de contenu
    local contentFrame = Instance.new("Frame")
    contentFrame.Size = UDim2.new(1, -200, 1, -50)
    contentFrame.Position = UDim2.new(0, 200, 0, 50)
    contentFrame.BackgroundColor3 = currentTheme.MainBackground
    contentFrame.BorderSizePixel = 0
    contentFrame.Parent = mainFrame

    local contentFrameStroke = Instance.new("UIStroke")
    contentFrameStroke.Thickness = 2
    contentFrameStroke.Color = currentTheme.BorderColor
    contentFrameStroke.Parent = contentFrame

    -- Bouton de fermeture
    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 40, 0, 40)
    closeButton.Position = UDim2.new(1, -50, 0, 5)
    closeButton.BackgroundColor3 = currentTheme.ButtonBackground
    closeButton.Text = "✕"
    closeButton.TextColor3 = currentTheme.TextColor
    closeButton.TextSize = 20
    closeButton.Font = Enum.Font.Code
    closeButton.Parent = mainFrame

    local closeStroke = Instance.new("UIStroke")
    closeStroke.Thickness = 2
    closeStroke.Color = currentTheme.BorderColor
    closeStroke.Parent = closeButton

    -- Bouton Paramètres
    local settingsButton = Instance.new("TextButton")
    settingsButton.Size = UDim2.new(0, 40, 0, 40)
    settingsButton.Position = UDim2.new(1, -100, 0, 5)
    settingsButton.BackgroundColor3 = currentTheme.ButtonBackground
    settingsButton.Text = "⚙"
    settingsButton.TextColor3 = currentTheme.TextColor
    settingsButton.TextSize = 20
    settingsButton.Font = Enum.Font.Code
    settingsButton.Parent = mainFrame

    local settingsStroke = Instance.new("UIStroke")
    settingsStroke.Thickness = 2
    settingsStroke.Color = currentTheme.BorderColor
    settingsStroke.Parent = settingsButton

    closeButton.MouseButton1Click:Connect(function()
        local tweenClose = TweenService:Create(mainFrame, TweenInfo.new(0.6, Enum.EasingStyle.Quint, Enum.EasingDirection.In), {Position = UDim2.new(0.5, mainFrame.Position.X.Offset, -0.5, 0)})
        tweenClose:Play()
        tweenClose.Completed:Connect(function()
            screenGui:Destroy()
        end)
    end)

    -- Toggle avec RightShift
    local isMenuOpen = true
    local defaultPosition = UDim2.new(0.5, -500, 0.5, -350)
    local hiddenPosition = UDim2.new(0.5, mainFrame.Position.X.Offset, 2, 0)

    local function toggleMenu()
        isMenuOpen = not isMenuOpen
        local targetPos = isMenuOpen and defaultPosition or hiddenPosition
        local tween = TweenService:Create(mainFrame, TweenInfo.new(0.6, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {Position = targetPos})
        tween:Play()
    end

    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if input.KeyCode == Enum.KeyCode.RightShift then
            toggleMenu()
        end
    end)

    -- Gestion des onglets
    local tabs = {}
    local currentTab = nil
    local settingsTab = nil

    -- Création de l'onglet Paramètres (caché)
    local function createSettingsTab()
        local CreateSection = loadComponent("CreateSection")
        if not CreateSection then
            warn("Impossible de charger CreateSection pour l'onglet Paramètres")
            return
        end

        local tab = loadComponent("CreateTab")(XyloKitUIWindow, contentFrame, tabs, currentTheme, "Setting & Visual")
        if not tab then
            warn("Impossible de créer l'onglet Paramètres")
            return
        end

        settingsTab = tab
        tabs[tab.Name] = tab

        -- Ajouter des sections et composants dans l'onglet Paramètres
        local section = CreateSection(tab, "Paramètres")
        local CreateColorpicker = loadComponent("CreateColorpicker")
        if CreateColorpicker then
            CreateColorpicker(section, {
                Name = "Couleur de fond",
                Default = currentTheme.MainBackground,
                Save = true,
                Callback = function(color)
                    mainFrame.BackgroundColor3 = color
                end
            })
        end

        return tab
    end

    createSettingsTab()

    settingsButton.MouseEnter:Connect(function()
        settingsButton.BackgroundColor3 = currentTheme.ButtonHoverBackground
    end)

    settingsButton.MouseLeave:Connect(function()
        settingsButton.BackgroundColor3 = currentTheme.ButtonBackground
    end)

    settingsButton.MouseButton1Click:Connect(function()
        if settingsTab and currentTab ~= settingsTab then
            if currentTab then
                currentTab.Content.Visible = false
                if currentTab.Indicator then
                    currentTab.Indicator.Visible = false
                    currentTab.Button.BackgroundColor3 = currentTheme.TabBackground
                end
            end
            settingsTab.Content.Visible = true
            currentTab = settingsTab
        end
    end)

    -- Charger les fonctions de composants pour la fenêtre
    XyloKitUIWindow.CreateTab = function(name)
        local CreateTab = loadComponent("CreateTab")
        if CreateTab then
            return CreateTab(XyloKitUIWindow, contentFrame, tabs, currentTheme, name)
        else
            warn("CreateTab n'est pas disponible")
            return nil
        end
    end

    XyloKitUIWindow.CreateSection = function(tab, name)
        local CreateSection = loadComponent("CreateSection")
        if CreateSection then
            return CreateSection(tab, name)
        else
            warn("CreateSection n'est pas disponible")
            return nil
        end
    end

    XyloKitUIWindow.CreateToggle = function(section, name, default, callback)
        local CreateToggle = loadComponent("CreateToggle")
        if CreateToggle then
            return CreateToggle(section, name, default, callback)
        else
            warn("CreateToggle n'est pas disponible")
            return nil
        end
    end

    XyloKitUIWindow.CreateSlider = function(section, name, min, max, default, callback)
        local CreateSlider = loadComponent("CreateSlider")
        if CreateSlider then
            return CreateSlider(section, name, min, max, default, callback)
        else
            warn("CreateSlider n'est pas disponible")
            return nil
        end
    end

    XyloKitUIWindow.CreateDropdown = function(section, name, options, default, callback)
        local CreateDropdown = loadComponent("CreateDropdown")
        if CreateDropdown then
            return CreateDropdown(section, name, options, default, callback)
        else
            warn("CreateDropdown n'est pas disponible")
            return nil
        end
    end

    XyloKitUIWindow.CreateColorpicker = function(section, config)
        local CreateColorpicker = loadComponent("CreateColorpicker")
        if CreateColorpicker then
            return CreateColorpicker(section, config)
        else
            warn("CreateColorpicker n'est pas disponible")
            return nil
        end
    end

    -- Profil du joueur
    local playerInfoFrame = Instance.new("Frame")
    playerInfoFrame.Size = UDim2.new(0, 198, 0, 60)
    playerInfoFrame.Position = UDim2.new(0, 0, 1, -60)
    playerInfoFrame.AnchorPoint = Vector2.new(0, 1)
    playerInfoFrame.BackgroundColor3 = currentTheme.TabBackground
    playerInfoFrame.BorderSizePixel = 0
    playerInfoFrame.Parent = mainFrame

    local playerInfoStroke = Instance.new("UIStroke")
    playerInfoStroke.Thickness = 2
    playerInfoStroke.Color = currentTheme.BorderColor
    playerInfoStroke.Parent = playerInfoFrame

    local playerIcon = Instance.new("ImageLabel")
    playerIcon.Size = UDim2.new(0, 40, 0, 40)
    playerIcon.Position = UDim2.new(0, 10, 0, 10)
    playerIcon.BackgroundTransparency = 1
    playerIcon.Image = player and "rbxthumb://type=AvatarHeadShot&id=" .. player.UserId .. "&w=420&h=420" or ""
    playerIcon.ClipsDescendants = true
    playerIcon.Parent = playerInfoFrame

    local iconCircle = Instance.new("UICorner")
    iconCircle.CornerRadius = UDim.new(0.5, 0)
    iconCircle.Parent = playerIcon

    local playerName = Instance.new("TextLabel")
    playerName.Size = UDim2.new(0, 140, 0, 40)
    playerName.Position = UDim2.new(0, 50, 0, 10)
    playerName.BackgroundTransparency = 1
    playerName.Text = player and player.Name or "#ERROR_UNKNOWN_404"
    playerName.TextColor3 = currentTheme.TextColor
    playerName.TextSize = 16
    playerName.Font = Enum.Font.Code
    playerName.TextXAlignment = Enum.TextXAlignment.Left
    playerName.TextTruncate = Enum.TextTruncate.AtEnd
    playerName.Parent = playerInfoFrame

    return XyloKitUIWindow
end

return XyloKitUI
