-- Protection de la mémoire (cache)
if not memorystats then 
    memorystats = {}
    memorystats.cache = function(a) end
    memorystats.restore = function(a) end 
end
for i, v in pairs({
    "Internal", "HttpCache", "Instances", "Signals", "Script", 
    "PhysicsCollision", "PhysicsParts", "GraphicsSolidModels", 
    "GraphicsMeshParts", "GraphicsParticles", "GraphicsParts", 
    "GraphicsSpatialHash", "GraphicsTerrain", "GraphicsTexture", 
    "GraphicsTextureCharacter", "Sounds", "StreamingSounds", 
    "TerrainVoxels", "Gui", "Animation", "Navigation", "GeometryCSG"
}) do
    memorystats.cache(v)
end

-- Services Roblox avec cloneref
local workspace = cloneref(game:GetService("Workspace"))
local Players = cloneref(game:GetService("Players"))
local RunService = cloneref(game:GetService("RunService"))
local Lighting = cloneref(game:GetService("Lighting"))
local UserInputService = cloneref(game:GetService("UserInputService"))
local HttpService = cloneref(game:GetService("HttpService"))
local TweenService = cloneref(game:GetService("TweenService"))
local GuiInset = cloneref(game:GetService("GuiService")):GetGuiInset()

-- Vérification du LocalPlayer
local LocalPlayer = Players.LocalPlayer
if not LocalPlayer then
    error("Script client not found")
    game:Kick("Erreur : Joueur local non détecté. Veuillez relancer le jeu.")
end

-- Initialisation sécurisée de la souris
local function getMouseSafely()
    local success, result = pcall(function() return LocalPlayer:GetMouse() end)
    return success and result or nil
end
local Mouse = getMouseSafely()
if not Mouse then
    LocalPlayer:GetPropertyChangedSignal("Mouse"):Wait()
    Mouse = LocalPlayer:GetMouse()
end
local Camera = workspace.CurrentCamera

-- Bibliothèque UI pour Roblox (Client-Side)
local BlitzXHub = {}

-- Fonction pour créer une notification
function BlitzXHub:CreateNotification(message, duration)
    local notification = Instance.new("ScreenGui")
    notification.Name = "BlitzXNotification"
    notification.Parent = LocalPlayer:WaitForChild("PlayerGui")
    notification.ResetOnSpawn = false

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 300, 0, 50)
    frame.Position = UDim2.new(1, -310, 0, 10)
    frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    frame.BorderSizePixel = 0
    frame.Parent = notification

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = message
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 14
    label.Font = Enum.Font.Code
    label.TextWrapped = true
    label.Parent = frame

    local tween = TweenService:Create(frame, TweenInfo.new(0.5), {Position = UDim2.new(1, -310, 0, 10)})
    tween:Play()

    task.spawn(function()
        task.wait(duration or 3)
        local tweenOut = TweenService:Create(frame, TweenInfo.new(0.5), {Position = UDim2.new(1, 10, 0, 10)})
        tweenOut:Play()
        tweenOut.Completed:Wait()
        notification:Destroy()
    end)
end

-- Fonction pour créer une fenêtre principale
function BlitzXHub:CreateWindow(windowName, gameName, introText, iconAssetId, themesEnabled, configFolder, theme)
    local window = {}
    window.Name = windowName or "BlitzX Hub"
    window.GameName = gameName or "Unknown Game"
    window.ThemesEnabled = themesEnabled or false
    window.ConfigFolder = configFolder or "BlitzXConfigs"
    window.Theme = theme or "Default"
    window.Visible = true

    -- Création de la ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = windowName
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
    screenGui.ResetOnSpawn = false
    screenGui.IgnoreGuiInset = true

    -- Création du cadre principal de la fenêtre
    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 600, 0, 400)
    mainFrame.Position = UDim2.new(0.5, -300, 0.5, -200)
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    mainFrame.ClipsDescendants = true

    -- Ajout d'un effet d'ombre
    local shadow = Instance.new("UIStroke")
    shadow.Thickness = 2
    shadow.Color = Color3.fromRGB(0, 0, 0)
    shadow.Parent = mainFrame

    -- Titre de la fenêtre
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, 0, 0, 50)
    titleLabel.Position = UDim2.new(0, 0, 0, 0)
    titleLabel.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    titleLabel.Text = windowName .. " | " .. gameName
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextSize = 18
    titleLabel.Font = Enum.Font.Code
    titleLabel.Parent = mainFrame

    -- Bouton pour fermer/minimiser
    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -40, 0, 10)
    closeButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    closeButton.Text = "X"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextSize = 14
    closeButton.Font = Enum.Font.Code
    closeButton.Parent = mainFrame

    -- Conteneur pour les onglets
    local tabContainer = Instance.new("Frame")
    tabContainer.Size = UDim2.new(0, 150, 1, -50)
    tabContainer.Position = UDim2.new(0, 0, 0, 50)
    tabContainer.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    tabContainer.Parent = mainFrame

    local tabListLayout = Instance.new("UIListLayout")
    tabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabListLayout.Parent = tabContainer

    -- Conteneur pour le contenu des onglets
    local contentContainer = Instance.new("Frame")
    contentContainer.Size = UDim2.new(1, -150, 1, -50)
    contentContainer.Position = UDim2.new(0, 150, 0, 50)
    contentContainer.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    contentContainer.Parent = mainFrame
    contentContainer.ClipsDescendants = true

    window.ScreenGui = screenGui
    window.MainFrame = mainFrame
    window.TabContainer = tabContainer
    window.ContentContainer = contentContainer
    window.Tabs = {}

    -- Rendre la fenêtre déplaçable
    local dragging, dragInput, dragStart, startPos
    local function updateInput(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    titleLabel.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    titleLabel.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            updateInput(input)
        end
    end)

    -- Gestion du bouton fermer
    closeButton.MouseButton1Click:Connect(function()
        window.Visible = not window.Visible
        mainFrame.Visible = window.Visible
        BlitzXHub:CreateNotification(window.Visible and "Interface affichée" or "Interface masquée", 2)
    end)

    -- Toggle UI avec la touche Insert
    UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.Insert then
            window.Visible = not window.Visible
            mainFrame.Visible = window.Visible
            BlitzXHub:CreateNotification(window.Visible and "Interface affichée" or "Interface masquée", 2)
        end
    end)

    -- Sauvegarde de la configuration
    local function saveConfig()
        local config = {}
        config.WindowPosition = {mainFrame.Position.X.Scale, mainFrame.Position.X.Offset, mainFrame.Position.Y.Scale, mainFrame.Position.Y.Offset}
        local success, encoded = pcall(HttpService.JSONEncode, HttpService, config)
        if success then
            writefile(window.ConfigFolder .. "/config.json", encoded)
        end
    end

    -- Chargement de la configuration
    local function loadConfig()
        if isfile(window.ConfigFolder .. "/config.json") then
            local success, config = pcall(HttpService.JSONDecode, HttpService, readfile(window.ConfigFolder .. "/config.json"))
            if success and config.WindowPosition then
                mainFrame.Position = UDim2.new(config.WindowPosition[1], config.WindowPosition[2], config.WindowPosition[3], config.WindowPosition[4])
            end
        end
    end

    -- Initialisation de la configuration
    if isfolder(window.ConfigFolder) then
        loadConfig()
    else
        makefolder(window.ConfigFolder)
    end

    mainFrame:GetPropertyChangedSignal("Position"):Connect(saveConfig)

    -- Notification de bienvenue
    BlitzXHub:CreateNotification(introText or "Bienvenue dans BlitzX Hub !", 3)

    return window
end

-- Fonction pour ajouter un onglet
function BlitzXHub:AddTab(window, tabName, isDefault, iconAssetId, iconSize, iconPosition)
    local tab = {}
    tab.Name = tabName or "Tab"
    tab.IsDefault = isDefault or false

    -- Bouton de l'onglet
    local tabButton = Instance.new("TextButton")
    tabButton.Size = UDim2.new(1, 0, 0, 40)
    tabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    tabButton.Text = tabName
    tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    tabButton.TextSize = 16
    tabButton.Font = Enum.Font.Code
    tabButton.Parent = window.TabContainer

    -- Ajout d'une icône si fournie
    if iconAssetId then
        local icon = Instance.new("ImageLabel")
        icon.Size = UDim2.new(0, iconSize and iconSize.X or 24, 0, iconSize and iconSize.Y or 24)
        icon.Position = UDim2.new(0, iconPosition and iconPosition.X or 5, 0, iconPosition and iconPosition.Y or 8)
        icon.BackgroundTransparency = 1
        icon.Image = iconAssetId
        icon.Parent = tabButton
        tabButton.TextXAlignment = Enum.TextXAlignment.Right
    end

    -- Conteneur pour le contenu de l'onglet
    local tabContent = Instance.new("Frame")
    tabContent.Size = UDim2.new(1, 0, 1, 0)
    tabContent.BackgroundTransparency = 1
    tabContent.Parent = window.ContentContainer
    tabContent.Visible = isDefault

    local contentLayout = Instance.new("UIListLayout")
    contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentLayout.Padding = UDim.new(0, 5)
    contentLayout.Parent = tabContent

    tab.Button = tabButton
    tab.Content = tabContent
    table.insert(window.Tabs, tab)

    -- Animation au survol
    tabButton.MouseEnter:Connect(function()
        TweenService:Create(tabButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(70, 70, 70)}):Play()
    end)
    tabButton.MouseLeave:Connect(function()
        if not tabContent.Visible then
            TweenService:Create(tabButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}):Play()
        end
    end)

    -- Gestion du clic sur l'onglet
    tabButton.MouseButton1Click:Connect(function()
        for _, otherTab in ipairs(window.Tabs) do
            otherTab.Content.Visible = false
            TweenService:Create(otherTab.Button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}):Play()
        end
        tabContent.Visible = true
        TweenService:Create(tabButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(70, 70, 70)}):Play()
    end)

    return tab
end

-- Fonction pour créer une section dans un onglet
function BlitzXHub:CreateSection(tab, sectionName)
    local section = {}
    section.Name = sectionName or "Section"

    local sectionFrame = Instance.new("Frame")
    sectionFrame.Size = UDim2.new(1, -10, 0, 100)
    sectionFrame.Position = UDim2.new(0, 5, 0, 0)
    sectionFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    sectionFrame.Parent = tab.Content
    sectionFrame.AutomaticSize = Enum.AutomaticSize.Y

    local sectionLayout = Instance.new("UIListLayout")
    sectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
    sectionLayout.Padding = UDim.new(0, 5)
    sectionLayout.Parent = sectionFrame

    local sectionLabel = Instance.new("TextLabel")
    sectionLabel.Size = UDim2.new(1, 0, 0, 30)
    sectionLabel.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    sectionLabel.Text = sectionName
    sectionLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    sectionLabel.TextSize = 16
    sectionLabel.Font = Enum.Font.Code
    sectionLabel.Parent = sectionFrame

    section.Frame = sectionFrame
    return section
end

-- Fonction pour créer un bouton
function BlitzXHub:CreateButton(section, buttonName, callback)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, -10, 0, 30)
    button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    button.Text = buttonName or "Button"
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 14
    button.Font = Enum.Font.Code
    button.Parent = section.Frame

    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(80, 80, 80)}):Play()
    end)
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(60, 60, 60)}):Play()
    end)

    button.MouseButton1Click:Connect(function()
        if callback then
            local success, err = pcall(callback)
            if not success then
                BlitzXHub:CreateNotification("Erreur dans le callback : " .. tostring(err), 3)
            end
        end
    end)

    return button
end

-- Fonction pour créer un label
function BlitzXHub:CreateLabel(section, labelText)
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -10, 0, 30)
    label.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    label.Text = labelText or "Label"
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 14
    label.Font = Enum.Font.Code
    label.TextWrapped = true
    label.Parent = section.Frame

    return label
end

return BlitzXHub
