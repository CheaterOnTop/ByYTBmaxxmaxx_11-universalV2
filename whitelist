-- Protection de la mémoire (cache)
if not memorystats then 
    memorystats = {}
    memorystats.cache = function(a) end
    memorystats.restore = function(a) end 
end
for _, v in pairs({
    "Internal", "HttpCache", "Instances", "Signals", "Script", 
    "PhysicsCollision", "PhysicsParts", "GraphicsSolidModels", 
    "GraphicsMeshParts", "GraphicsParticles", "GraphicsParts", 
    "GraphicsSpatialHash", "GraphicsTerrain", "GraphicsTexture", 
    "GraphicsTextureCharacter", "Sounds", "StreamingSounds", 
    "TerrainVoxels", "Gui", "Animation", "Navigation", "GeometryCSG"
}) do
    memorystats.cache(v)
end

-- Services Roblox avec cloneref
local CoreGui = cloneref(game:GetService("CoreGui"))
local Players = cloneref(game:GetService("Players"))
local RunService = cloneref(game:GetService("RunService"))
local UserInputService = cloneref(game:GetService("UserInputService"))
local HttpService = cloneref(game:GetService("HttpService"))
local TweenService = cloneref(game:GetService("TweenService"))
local SoundService = cloneref(game:GetService("SoundService"))

-- Vérification du LocalPlayer
local LocalPlayer = Players.LocalPlayer
if not LocalPlayer then
    error("Script client not found")
    game:Kick("Erreur : Joueur local non détecté. Veuillez relancer le jeu.")
    return
end

-- Initialisation sécurisée de la souris
local function getMouseSafely()
    local success, result = pcall(function() return LocalPlayer:GetMouse() end)
    return success and result or nil
end
local Mouse = getMouseSafely()
if not Mouse then
    LocalPlayer:GetPropertyChangedSignal("Mouse"):Wait()
    Mouse = LocalPlayer:GetMouse()
end
local Camera = cloneref(game:GetService("Workspace")).CurrentCamera

-- Bibliothèque UI
local BlitzXHub = {
    MainColor = Color3.fromRGB(28, 37, 38), -- Fond gris sombre
    OutlineColor = Color3.fromRGB(60, 60, 60),
    AccentColor = Color3.fromRGB(80, 80, 80), -- Gris plus clair pour survol
    AccentColorDark = Color3.fromRGB(50, 50, 50),
    FontColor = Color3.fromRGB(200, 200, 200), -- Texte blanc cassé
    Registry = {},
}

-- Thèmes
local Themes = {
    Exploit = {
        Background = Color3.fromRGB(28, 37, 38), -- Gris sombre
        Accent = Color3.fromRGB(50, 50, 50),
        Highlight = Color3.fromRGB(80, 80, 80), -- Gris clair pour survol
        Text = Color3.fromRGB(200, 200, 200),
        Section = Color3.fromRGB(35, 45, 46),
        Header = Color3.fromRGB(20, 25, 26),
        Border = Color3.fromRGB(60, 60, 60),
    }
}

-- Fonctions utilitaires
function BlitzXHub:Create(Class, Properties)
    local Obj = Instance.new(Class)
    for Prop, Value in pairs(Properties or {}) do
        Obj[Prop] = Value
    end
    return Obj
end

function BlitzXHub:CreateLabel(Properties)
    return self:Create('TextLabel', {
        BackgroundTransparency = 1,
        TextColor3 = self.FontColor,
        Font = Enum.Font.Code,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextSize = 14,
        ZIndex = 5,
        Parent = Properties.Parent,
        Size = Properties.Size or UDim2.new(1, 0, 0, 20),
        Text = Properties.Text or ''
    })
end

function BlitzXHub:AddToRegistry(Obj, Properties)
    self.Registry[Obj] = Properties
end

function BlitzXHub:RemoveFromRegistry(Obj)
    self.Registry[Obj] = nil
end

function BlitzXHub:OnHighlight(Obj, Target, HighlightProps, DefaultProps)
    Obj.MouseEnter:Connect(function()
        for Prop, Value in pairs(HighlightProps) do
            Target[Prop] = Value
        end
    end)
    Obj.MouseLeave:Connect(function()
        for Prop, Value in pairs(DefaultProps) do
            Target[Prop] = Value
        end
    end)
end

function BlitzXHub:AddToolTip(Tooltip, Parent)
    local TooltipFrame = self:Create('Frame', {
        Size = UDim2.new(0, 120, 0, 25),
        BackgroundColor3 = self.MainColor,
        Visible = false,
        ZIndex = 10,
        Parent = Parent.Parent
    })

    self:Create('UICorner', {CornerRadius = UDim.new(0, 4), Parent = TooltipFrame})

    self:CreateLabel({
        Size = UDim2.new(1, -5, 1, -5),
        Position = UDim2.new(0, 3, 0, 3),
        Text = Tooltip,
        TextSize = 12,
        TextWrapped = true,
        Parent = TooltipFrame
    })

    Parent.MouseMoved:Connect(function(x, y)
        TooltipFrame.Position = UDim2.new(0, x - Parent.Parent.AbsolutePosition.X + 10, 0, y - Parent.Parent.AbsolutePosition.Y + 10)
        TooltipFrame.Visible = true
    end)
    Parent.MouseLeave:Connect(function()
        TooltipFrame.Visible = false
    end)
end

function BlitzXHub:SafeCallback(Func, ...)
    if type(Func) == 'function' then
        local success, err = pcall(Func, ...)
        if not success then
            warn("Callback error:", err)
        end
    end
end

function BlitzXHub:MapValue(Value, InMin, InMax, OutMin, OutMax)
    return (Value - InMin) * (OutMax - OutMin) / (InMax - InMin) + OutMin
end

function BlitzXHub:MouseIsOverOpenedFrame()
    local mousePos = UserInputService:GetMouseLocation()
    for frame, _ in pairs(self.Registry) do
        if frame:IsA("GuiObject") and frame.Visible then
            local pos = frame.AbsolutePosition
            local size = frame.AbsoluteSize
            if mousePos.X >= pos.X and mousePos.X <= pos.X + size.X and
               mousePos.Y >= pos.Y and mousePos.Y <= pos.Y + size.Y then
                return true
            end
        end
    end
    return false
end

-- Création de la fenêtre
function BlitzXHub:CreateWindow(windowName, gameName, introText, iconAssetId, themesEnabled, configFolder, theme)
    local window = {
        Name = windowName or "BlitzX Hub",
        GameName = gameName or "Unknown Game",
        ThemesEnabled = themesEnabled or false,
        ConfigFolder = configFolder or "BlitzXConfigs",
        Theme = Themes[theme] or Themes.Exploit,
        Visible = true,
        Connections = {},
        Config = {}
    }

    local screenGui = self:Create('ScreenGui', {
        Name = "BlitzXHub_" .. windowName,
        Parent = CoreGui,
        ResetOnSpawn = false,
        IgnoreGuiInset = true,
        DisplayOrder = 1000
    })

    local mainFrame = self:Create('Frame', {
        Size = UDim2.new(0, 600, 0, 400),
        Position = UDim2.new(0.5, -300, 0.5, -200),
        BackgroundColor3 = window.Theme.Background,
        BackgroundTransparency = 0.2,
        BorderSizePixel = 0,
        Parent = screenGui,
        ClipsDescendants = true
    })

    self:Create('UICorner', {CornerRadius = UDim.new(0, 6), Parent = mainFrame})
    self:Create('UIStroke', {Thickness = 1, Color = window.Theme.Border, Transparency = 0.5, Parent = mainFrame})

    mainFrame.Size = UDim2.new(0, 0, 0, 0)
    TweenService:Create(mainFrame, TweenInfo.new(0.4, Enum.EasingStyle.Sine), {Size = UDim2.new(0, 600, 0, 400), BackgroundTransparency = 0.2}):Play()

    local titleLabel = self:CreateLabel({
        Size = UDim2.new(1, -40, 0, 30),
        Text = "BlitzXHub | " .. windowName .. " | " .. gameName,
        TextSize = 16,
        Parent = mainFrame
    })
    self:Create('UICorner', {CornerRadius = UDim.new(0, 4), Parent = titleLabel})

    local watermark = self:CreateLabel({
        Size = UDim2.new(1, 0, 0, 20),
        Position = UDim2.new(0, 0, 1, -20),
        Text = "BlitzXHub v1.0",
        TextSize = 12,
        TextTransparency = 0.7,
        Parent = mainFrame
    })

    local closeButton = self:Create('TextButton', {
        Size = UDim2.new(0, 24, 0, 24),
        Position = UDim2.new(1, -30, 0, 3),
        BackgroundColor3 = window.Theme.Border,
        Text = "X",
        TextColor3 = window.Theme.Text,
        TextSize = 14,
        Font = Enum.Font.Code,
        Parent = mainFrame
    })
    self:Create('UICorner', {CornerRadius = UDim.new(0, 4), Parent = closeButton})

    local tabContainer = self:Create('ScrollingFrame', {
        Size = UDim2.new(0, 120, 1, -50),
        Position = UDim2.new(0, 0, 0, 30),
        BackgroundTransparency = 1,
        ScrollBarThickness = 3,
        ScrollBarImageColor3 = window.Theme.Highlight,
        Parent = mainFrame
    })

    self:Create('UIListLayout', {SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 3), Parent = tabContainer})
    self:Create('UIPadding', {PaddingTop = UDim.new(0, 5), PaddingLeft = UDim.new(0, 5), Parent = tabContainer})

    local contentContainer = self:Create('Frame', {
        Size = UDim2.new(1, -120, 1, -50),
        Position = UDim2.new(0, 120, 0, 30),
        BackgroundTransparency = 1,
        Parent = mainFrame,
        ClipsDescendants = true
    })

    local resizeHandle = self:Create('Frame', {
        Size = UDim2.new(0, 10, 0, 10),
        Position = UDim2.new(1, -10, 1, -10),
        BackgroundColor3 = window.Theme.Highlight,
        Parent = mainFrame
    })
    self:Create('UICorner', {CornerRadius = UDim.new(0, 4), Parent = resizeHandle})

    window.ScreenGui = screenGui
    window.MainFrame = mainFrame
    window.TabContainer = tabContainer
    window.ContentContainer = contentContainer
    window.Tabs = {}

    local dragging, dragInput, dragStart, startPos
    local function updateInput(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    table.insert(window.Connections, titleLabel.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end))

    table.insert(window.Connections, titleLabel.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end))

    table.insert(window.Connections, UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            updateInput(input)
        end
    end))

    local resizing, resizeStart, resizeStartSize
    table.insert(window.Connections, resizeHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            resizing = true
            resizeStart = input.Position
            resizeStartSize = mainFrame.Size
        end
    end))

    table.insert(window.Connections, resizeHandle.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            resizing = false
        end
    end))

    table.insert(window.Connections, UserInputService.InputChanged:Connect(function(input)
        if resizing and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - resizeStart
            local newWidth = math.clamp(resizeStartSize.X.Offset + delta.X, 400, 1000)
            local newHeight = math.clamp(resizeStartSize.Y.Offset + delta.Y, 300, 800)
            mainFrame.Size = UDim2.new(0, newWidth, 0, newHeight)
        end
    end))

    table.insert(window.Connections, closeButton.MouseButton1Click:Connect(function()
        window.Visible = not window.Visible
        TweenService:Create(mainFrame, TweenInfo.new(0.4, Enum.EasingStyle.Sine), {Size = window.Visible and UDim2.new(0, mainFrame.Size.X.Offset, 0, mainFrame.Size.Y.Offset) or UDim2.new(0, 0, 0, 0), BackgroundTransparency = window.Visible and 0.2 or 1}):Play()
        mainFrame.Visible = window.Visible
    end))

    table.insert(window.Connections, UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.Insert then
            window.Visible = not window.Visible
            TweenService:Create(mainFrame, TweenInfo.new(0.4, Enum.EasingStyle.Sine), {Size = window.Visible and UDim2.new(0, mainFrame.Size.X.Offset, 0, mainFrame.Size.Y.Offset) or UDim2.new(0, 0, 0, 0), BackgroundTransparency = window.Visible and 0.2 or 1}):Play()
            mainFrame.Visible = window.Visible
        end
    end))

    local function saveConfig()
        local config = {
            WindowPosition = {mainFrame.Position.X.Scale, mainFrame.Position.X.Offset, mainFrame.Position.Y.Scale, mainFrame.Position.Y.Offset},
            WindowSize = {mainFrame.Size.X.Offset, mainFrame.Size.Y.Offset},
            Theme = theme,
            Settings = window.Config
        }
        local success, encoded = pcall(HttpService.JSONEncode, HttpService, config)
        if success then
            pcall(writefile, window.ConfigFolder .. "/config.json", encoded)
        end
    end

    local function loadConfig()
        if isfile(window.ConfigFolder .. "/config.json") then
            local success, config = pcall(HttpService.JSONDecode, HttpService, readfile(window.ConfigFolder .. "/config.json"))
            if success then
                if config.WindowPosition then
                    mainFrame.Position = UDim2.new(config.WindowPosition[1], config.WindowPosition[2], config.WindowPosition[3], config.WindowPosition[4])
                end
                if config.WindowSize then
                    mainFrame.Size = UDim2.new(0, config.WindowSize[1], 0, config.WindowSize[2])
                end
                if config.Theme and Themes[config.Theme] then
                    window.Theme = Themes[config.Theme]
                    mainFrame.BackgroundColor3 = window.Theme.Background
                    contentContainer.BackgroundColor3 = window.Theme.Background
                    tabContainer.BackgroundColor3 = window.Theme.Background
                    titleLabel.BackgroundColor3 = window.Theme.Header
                    titleLabel.TextColor3 = window.Theme.Text
                    closeButton.BackgroundColor3 = window.Theme.Border
                    closeButton.TextColor3 = window.Theme.Text
                    watermark.TextColor3 = window.Theme.Text
                end
                window.Config = config.Settings or {}
            end
        end
    end

    if not isfolder(window.ConfigFolder) then
        pcall(makefolder, window.ConfigFolder)
    end
    loadConfig()

    table.insert(window.Connections, mainFrame:GetPropertyChangedSignal("Position"):Connect(saveConfig))
    table.insert(window.Connections, mainFrame:GetPropertyChangedSignal("Size"):Connect(saveConfig))

    function window:Destroy()
        for _, connection in ipairs(window.Connections) do
            connection:Disconnect()
        end
        screenGui:Destroy()
    end

    return window
end

-- Création d'un onglet
function BlitzXHub:AddTab(window, tabName, isDefault, iconAssetId, iconSize, iconPosition)
    local tab = {
        Name = tabName or "Tab",
        IsDefault = isDefault or false,
        Connections = {}
    }

    local tabButton = self:Create('TextButton', {
        Size = UDim2.new(1, -10, 0, 30),
        BackgroundColor3 = window.Theme.Accent,
        Text = tabName,
        TextColor3 = window.Theme.Text,
        TextSize = 14,
        Font = Enum.Font.Code,
        Parent = window.TabContainer
    })

    self:Create('UICorner', {CornerRadius = UDim.new(0, 4), Parent = tabButton})
    self:Create('UIStroke', {Thickness = 1, Color = window.Theme.Border, Transparency = 0.6, Parent = tabButton})

    if iconAssetId then
        self:Create('ImageLabel', {
            Size = UDim2.new(0, iconSize and iconSize.X or 20, 0, iconSize and iconSize.Y or 20),
            Position = UDim2.new(0, iconPosition and iconPosition.X or 5, 0, iconPosition and iconPosition.Y or 5),
            BackgroundTransparency = 1,
            Image = iconAssetId,
            Parent = tabButton
        })
        tabButton.TextXAlignment = Enum.TextXAlignment.Right
    end

    local tabContent = self:Create('Frame', {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Parent = window.ContentContainer,
        Visible = isDefault
    })

    self:Create('UIListLayout', {SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 5), Parent = tabContent})

    tab.Button = tabButton
    tab.Content = tabContent
    table.insert(window.Tabs, tab)

    table.insert(tab.Connections, tabButton.MouseEnter:Connect(function()
        TweenService:Create(tabButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = window.Theme.Highlight, Size = UDim2.new(1, -8, 0, 32)}):Play()
    end))
    table.insert(tab.Connections, tabButton.MouseLeave:Connect(function()
        if not tabContent.Visible then
            TweenService:Create(tabButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = window.Theme.Accent, Size = UDim2.new(1, -10, 0, 30)}):Play()
        end
    end))

    table.insert(tab.Connections, tabButton.MouseButton1Click:Connect(function()
        for _, otherTab in ipairs(window.Tabs) do
            otherTab.Content.Visible = false
            TweenService:Create(otherTab.Button, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = window.Theme.Accent, Size = UDim2.new(1, -10, 0, 30)}):Play()
        end
        tabContent.Visible = true
        TweenService:Create(tabButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = window.Theme.Highlight, Size = UDim2.new(1, -8, 0, 32)}):Play()
    end))

    return tab
end

-- Création d'une section
function BlitzXHub:CreateSection(tab, sectionName, window)
    local section = {
        Name = sectionName or "Section",
        Container = self:Create('Frame', {
            Size = UDim2.new(1, -10, 0, 0),
            Position = UDim2.new(0, 5, 0, 0),
            BackgroundColor3 = window.Theme.Section,
            Parent = tab.Content,
            AutomaticSize = Enum.AutomaticSize.Y
        })
    }

    self:Create('UICorner', {CornerRadius = UDim.new(0, 4), Parent = section.Container})
    self:Create('UIListLayout', {SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 4), Parent = section.Container})
    self:Create('UIPadding', {PaddingTop = UDim.new(0, 4), PaddingLeft = UDim.new(0, 4), PaddingRight = UDim.new(0, 4), Parent = section.Container})

    local sectionLabel = self:CreateLabel({
        Size = UDim2.new(1, 0, 0, 25),
        Text = "BlitzXHub | " .. sectionName,
        TextSize = 14,
        Parent = section.Container
    })
    self:Create('UICorner', {CornerRadius = UDim.new(0, 4), Parent = sectionLabel})

    function section:Resize()
        local sizeY = section.Container.UIListLayout.AbsoluteContentSize.Y + 8
        section.Container.Size = UDim2.new(1, -10, 0, sizeY)
    end

    function section:AddBlank(Size)
        self:Create('Frame', {
            Size = UDim2.new(1, 0, 0, Size or 5),
            BackgroundTransparency = 1,
            Parent = self.Container
        })
        self:Resize()
    end

    return section
end

-- Création d'un bouton
function BlitzXHub:AddButton(section, ...)
    local Button = {
        Text = '',
        Func = nil,
        DoubleClick = false,
        Tooltip = nil,
        Locked = false
    }

    local function ProcessButtonParams(...)
        local Props = select(1, ...)
        if type(Props) == 'table' then
            Button.Text = Props.Text or "Button"
            Button.Func = Props.Func
            Button.DoubleClick = Props.DoubleClick or false
            Button.Tooltip = Props.Tooltip
        else
            Button.Text = select(1, ...) or "Button"
            Button.Func = select(2, ...)
        end
        assert(type(Button.Func) == 'function', 'AddButton: `Func` callback is missing.')
    end

    ProcessButtonParams(...)

    local Outer = self:Create('Frame', {
        BackgroundColor3 = Color3.new(0, 0, 0),
        BorderColor3 = Color3.new(0, 0, 0),
        Size = UDim2.new(1, -4, 0, 24),
        ZIndex = 5,
        Parent = section.Container
    })

    local Inner = self:Create('Frame', {
        BackgroundColor3 = self.MainColor,
        BorderColor3 = self.OutlineColor,
        BorderMode = Enum.BorderMode.Inset,
        Size = UDim2.new(1, 0, 1, 0),
        ZIndex = 6,
        Parent = Outer
    })

    local Label = self:CreateLabel({
        Size = UDim2.new(1, 0, 1, 0),
        Text = "BlitzXHub | " .. Button.Text,
        TextSize = 14,
        Parent = Inner
    })

    self:Create('UICorner', {CornerRadius = UDim.new(0, 4), Parent = Outer})
    self:Create('UICorner', {CornerRadius = UDim.new(0, 4), Parent = Inner})

    local Stroke = self:Create('UIStroke', {
        Thickness = 1,
        Color = self.OutlineColor,
        Transparency = 0.6,
        Parent = Inner
    })

    local RippleFrame = self:Create('Frame', {
        Size = UDim2.new(0, 0, 0, 0),
        BackgroundColor3 = self.AccentColor,
        BackgroundTransparency = 0.5,
        ClipsDescendants = true,
        Parent = Inner
    })
    self:Create('UICorner', {CornerRadius = UDim.new(1, 0), Parent = RippleFrame})

    self:AddToRegistry(Outer, {BorderColor3 = 'Black'})
    self:AddToRegistry(Inner, {BackgroundColor3 = 'MainColor', BorderColor3 = 'OutlineColor'})
    self:AddToRegistry(Label, {TextColor3 = 'FontColor'})

    self:OnHighlight(Outer, Inner, {BackgroundColor3 = self.AccentColor, BorderColor3 = self.AccentColorDark}, {BackgroundColor3 = self.MainColor, BorderColor3 = self.OutlineColor})

    local function WaitForEvent(event, timeout, validator)
        local bindable = Instance.new('BindableEvent')
        local connection = event:Once(function(...)
            if type(validator) == 'function' and validator(...) then
                bindable:Fire(true)
            else
                bindable:Fire(false)
            end
        end)
        task.delay(timeout, function()
            connection:Disconnect()
            bindable:Fire(false)
        end)
        return bindable.Event:Wait()
    end

    local function ValidateClick(Input)
        if self:MouseIsOverOpenedFrame() then return false end
        if Input.UserInputType ~= Enum.UserInputType.MouseButton1 then return false end
        return true
    end

    Outer.InputBegan:Connect(function(Input)
        if not ValidateClick(Input) or Button.Locked then return end

        if Button.DoubleClick then
            self:RemoveFromRegistry(Label)
            self:AddToRegistry(Label, {TextColor3 = 'AccentColor'})
            Label.TextColor3 = self.AccentColor
            Label.Text = "Êtes-vous sûr ?"
            Button.Locked = true

            local clicked = WaitForEvent(Outer.InputBegan, 0.5, ValidateClick)

            self:RemoveFromRegistry(Label)
            self:AddToRegistry(Label, {TextColor3 = 'FontColor'})
            Label.TextColor3 = self.FontColor
            Label.Text = "BlitzXHub | " .. Button.Text
            Button.Locked = false

            if clicked then
                local sound = Instance.new("Sound", Inner)
                sound.SoundId = "rbxassetid://200427996"
                sound.Volume = 0.5
                sound:Play()
                task.spawn(function()
                    task.wait(1)
                    sound:Destroy()
                end)

                local mousePos = UserInputService:GetMouseLocation()
                local relPos = mousePos - Outer.AbsolutePosition
                RippleFrame.Position = UDim2.new(0, relPos.X, 0, relPos.Y)
                RippleFrame.Size = UDim2.new(0, 0, 0, 0)
                TweenService:Create(RippleFrame, TweenInfo.new(0.4, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 100, 0, 100), BackgroundTransparency = 1}):Play()

                self:SafeCallback(Button.Func)
            end
            return
        end

        local sound = Instance.new("Sound", Inner)
        sound.SoundId = "rbxassetid://200427996"
        sound.Volume = 0.5
        sound:Play()
        task.spawn(function()
            task.wait(1)
            sound:Destroy()
        end)

        local mousePos = UserInputService:GetMouseLocation()
        local relPos = mousePos - Outer.AbsolutePosition
        RippleFrame.Position = UDim2.new(0, relPos.X, 0, relPos.Y)
        RippleFrame.Size = UDim2.new(0, 0, 0, 0)
        TweenService:Create(RippleFrame, TweenInfo.new(0.4, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 100, 0, 100), BackgroundTransparency = 1}):Play()

        self:SafeCallback(Button.Func)
    end)

    function Button:AddTooltip(tooltip)
        if type(tooltip) == 'string' then
            self:AddToolTip(tooltip, Outer)
        end
        return self
    end

    function Button:AddButton(...)
        local SubButton = {
            Text = '',
            Func = nil,
            DoubleClick = false,
            Tooltip = nil,
            Locked = false
        }

        ProcessButtonParams(...)

        Outer.Size = UDim2.new(0.5, -2, 0, 24)

        SubButton.Outer = self:Create('Frame', {
            BackgroundColor3 = Color3.new(0, 0, 0),
            BorderColor3 = Color3.new(0, 0, 0),
            Size = UDim2.fromOffset(Outer.AbsoluteSize.X - 2, Outer.AbsoluteSize.Y),
            Position = UDim2.new(1, 3, 0, 0),
            ZIndex = 5,
            Parent = Outer
        })

        SubButton.Inner = self:Create('Frame', {
            BackgroundColor3 = self.MainColor,
            BorderColor3 = self.OutlineColor,
            BorderMode = Enum.BorderMode.Inset,
            Size = UDim2.new(1, 0, 1, 0),
            ZIndex = 6,
            Parent = SubButton.Outer
        })

        SubButton.Label = self:CreateLabel({
            Size = UDim2.new(1, 0, 1, 0),
            Text = "BlitzXHub | " .. SubButton.Text,
            TextSize = 14,
            Parent = SubButton.Inner
        })

        self:Create('UICorner', {CornerRadius = UDim.new(0, 4), Parent = SubButton.Outer})
        self:Create('UICorner', {CornerRadius = UDim.new(0, 4), Parent = SubButton.Inner})

        local SubStroke = self:Create('UIStroke', {
            Thickness = 1,
            Color = self.OutlineColor,
            Transparency = 0.6,
            Parent = SubButton.Inner
        })

        local SubRippleFrame = self:Create('Frame', {
            Size = UDim2.new(0, 0, 0, 0),
            BackgroundColor3 = self.AccentColor,
            BackgroundTransparency = 0.5,
            ClipsDescendants = true,
            Parent = SubButton.Inner
        })
        self:Create('UICorner', {CornerRadius = UDim.new(1, 0), Parent = SubRippleFrame})

        self:AddToRegistry(SubButton.Outer, {BorderColor3 = 'Black'})
        self:AddToRegistry(SubButton.Inner, {BackgroundColor3 = 'MainColor', BorderColor3 = 'OutlineColor'})
        self:AddToRegistry(SubButton.Label, {TextColor3 = 'FontColor'})

        self:OnHighlight(SubButton.Outer, SubButton.Inner, {BackgroundColor3 = self.AccentColor, BorderColor3 = self.AccentColorDark}, {BackgroundColor3 = self.MainColor, BorderColor3 = self.OutlineColor})

        SubButton.Outer.InputBegan:Connect(function(Input)
            if not ValidateClick(Input) or SubButton.Locked then return end

            if SubButton.DoubleClick then
                self:RemoveFromRegistry(SubButton.Label)
                self:AddToRegistry(SubButton.Label, {TextColor3 = 'AccentColor'})
                SubButton.Label.TextColor3 = self.AccentColor
                SubButton.Label.Text = "Êtes-vous sûr ?"
                SubButton.Locked = true

                local clicked = WaitForEvent(SubButton.Outer.InputBegan, 0.5, ValidateClick)

                self:RemoveFromRegistry(SubButton.Label)
                self:AddToRegistry(SubButton.Label, {TextColor3 = 'FontColor'})
                SubButton.Label.TextColor3 = self.FontColor
                SubButton.Label.Text = "BlitzXHub | " .. SubButton.Text
                SubButton.Locked = false

                if clicked then
                    local sound = Instance.new("Sound", SubButton.Inner)
                    sound.SoundId = "rbxassetid://200427996"
                    sound.Volume = 0.5
                    sound:Play()
                    task.spawn(function()
                        task.wait(1)
                        sound:Destroy()
                    end)

                    local mousePos = UserInputService:GetMouseLocation()
                    local relPos = mousePos - SubButton.Outer.AbsolutePosition
                    SubRippleFrame.Position = UDim2.new(0, relPos.X, 0, relPos.Y)
                    SubRippleFrame.Size = UDim2.new(0, 0, 0, 0)
                    TweenService:Create(SubRippleFrame, TweenInfo.new(0.4, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 100, 0, 100), BackgroundTransparency = 1}):Play()

                    self:SafeCallback(SubButton.Func)
                end
                return
            end

            local sound = Instance.new("Sound", SubButton.Inner)
            sound.SoundId = "rbxassetid://200427996"
            sound.Volume = 0.5
            sound:Play()
            task.spawn(function()
                task.wait(1)
                sound:Destroy()
            end)

            local mousePos = UserInputService:GetMouseLocation()
            local relPos = mousePos - SubButton.Outer.AbsolutePosition
            SubRippleFrame.Position = UDim2.new(0, relPos.X, 0, relPos.Y)
            SubRippleFrame.Size = UDim2.new(0, 0, 0, 0)
            TweenService:Create(SubRippleFrame, TweenInfo.new(0.4, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 100, 0, 100), BackgroundTransparency = 1}):Play()

            self:SafeCallback(SubButton.Func)
        end)

        function SubButton:AddTooltip(tooltip)
            if type(tooltip) == 'string' then
                self:AddToolTip(tooltip, SubButton.Outer)
            end
            return SubButton
        end

        if type(SubButton.Tooltip) == 'string' then
            self:AddToolTip(SubButton.Tooltip, SubButton.Outer)
        end

        return SubButton
    end

    if type(Button.Tooltip) == 'string' then
        self:AddToolTip(Button.Tooltip, Outer)
    end

    section:AddBlank(5)
    section:Resize()

    return Button
end

-- Création d'un slider
function BlitzXHub:AddSlider(section, Idx, Info)
    assert(Info.Default, 'AddSlider: Missing default value.')
    assert(Info.Text, 'AddSlider: Missing slider text.')
    assert(Info.Min, 'AddSlider: Missing minimum value.')
    assert(Info.Max, 'AddSlider: Missing maximum value.')
    assert(Info.Rounding, 'AddSlider: Missing rounding value.')

    local Slider = {
        Value = Info.Default,
        Min = Info.Min,
        Max = Info.Max,
        Rounding = Info.Rounding,
        MaxSize = 200,
        Type = 'Slider',
        Callback = Info.Callback or function(Value) end,
        Suffix = Info.Suffix or '',
        Compact = Info.Compact or false
    }

    local Container = section.Container
    window.Config[Idx] = Slider.Value

    if not Slider.Compact then
        local Label = self:CreateLabel({
            Size = UDim2.new(1, 0, 0, 16),
            Text = "BlitzXHub | " .. Info.Text,
            TextSize = 14,
            TextYAlignment = Enum.TextYAlignment.Bottom,
            Parent = Container
        })
        self:Create('UICorner', {CornerRadius = UDim.new(0, 4), Parent = Label})
        section:AddBlank(3)
    end

    local SliderOuter = self:Create('Frame', {
        BackgroundColor3 = Color3.new(0, 0, 0),
        BorderColor3 = Color3.new(0, 0, 0),
        Size = UDim2.new(1, -4, 0, 14),
        ZIndex = 5,
        Parent = Container
    })

    self:Create('UICorner', {CornerRadius = UDim.new(0, 3), Parent = SliderOuter})

    local SliderInner = self:Create('Frame', {
        BackgroundColor3 = self.MainColor,
        BorderColor3 = self.OutlineColor,
        BorderMode = Enum.BorderMode.Inset,
        Size = UDim2.new(1, 0, 1, 0),
        ZIndex = 6,
        Parent = SliderOuter
    })

    self:Create('UICorner', {CornerRadius = UDim.new(0, 3), Parent = SliderInner})

    local Fill = self:Create('Frame', {
        BackgroundColor3 = self.AccentColor,
        BorderColor3 = self.AccentColorDark,
        Size = UDim2.new(0, 0, 1, 0),
        ZIndex = 7,
        Parent = SliderInner
    })

    self:Create('UICorner', {CornerRadius = UDim.new(0, 3), Parent = Fill})

    local Handle = self:Create('Frame', {
        Size = UDim2.new(0, 12, 0, 12),
        Position = UDim2.new(0, 0, 0, -3),
        BackgroundColor3 = self.FontColor,
        ZIndex = 8,
        Parent = SliderInner
    })

    self:Create('UICorner', {CornerRadius = UDim.new(1, 0), Parent = Handle})

    local ValueLabel = self:CreateLabel({
        Size = UDim2.new(0, 40, 0, 16),
        Position = UDim2.new(0, 0, 0, -20),
        Text = tostring(Slider.Value) .. Slider.Suffix,
        TextSize = 12,
        Visible = false,
        Parent = SliderInner
    })

    self:Create('UICorner', {CornerRadius = UDim.new(0, 4), Parent = ValueLabel})

    local DisplayLabel = self:CreateLabel({
        Size = UDim2.new(1, 0, 1, 0),
        Text = Slider.Compact and ("BlitzXHub | " .. Info.Text .. ": " .. Slider.Value .. Slider.Suffix) or (Info.HideMax and tostring(Slider.Value .. Slider.Suffix) or string.format("%s/%s", Slider.Value .. Slider.Suffix, Slider.Max .. Slider.Suffix)),
        TextSize = 14,
        Parent = SliderInner
    })

    self:AddToRegistry(SliderOuter, {BorderColor3 = 'Black'})
    self:AddToRegistry(SliderInner, {BackgroundColor3 = 'MainColor', BorderColor3 = 'OutlineColor'})
    self:AddToRegistry(Fill, {BackgroundColor3 = 'AccentColor', BorderColor3 = 'AccentColorDark'})
    self:AddToRegistry(DisplayLabel, {TextColor3 = 'FontColor'})

    self:OnHighlight(SliderOuter, SliderOuter, {BorderColor3 = self.AccentColor}, {BorderColor3 = 'Black'})

    if type(Info.Tooltip) == 'string' then
        self:AddToolTip(Info.Tooltip, SliderOuter)
    end

    function Slider:UpdateColors()
        Fill.BackgroundColor3 = self.AccentColor
        Fill.BorderColor3 = self.AccentColorDark
    end

    function Slider:Display()
        local X = math.ceil(self:MapValue(Slider.Value, Slider.Min, Slider.Max, 0, Slider.MaxSize))
        Fill.Size = UDim2.new(0, X, 1, 0)
        Handle.Position = UDim2.new(0, X - 6, 0, -3)
        ValueLabel.Position = UDim2.new(0, X - 20, 0, -20)
        ValueLabel.Text = tostring(Slider.Value) .. Slider.Suffix
        DisplayLabel.Text = Slider.Compact and ("BlitzXHub | " .. Info.Text .. ": " .. Slider.Value .. Slider.Suffix) or (Info.HideMax and tostring(Slider.Value .. Slider.Suffix) or string.format("%s/%s", Slider.Value .. Slider.Suffix, Slider.Max .. Slider.Suffix))
    end

    function Slider:OnChanged(Func)
        Slider.Changed = Func
        Func(Slider.Value)
    end

    function Slider:GetValueFromXOffset(X)
        local Value = self:MapValue(X, 0, Slider.MaxSize, Slider.Min, Slider.Max)
        if Slider.Rounding == 0 then
            return math.floor(Value)
        end
        return tonumber(string.format('%.' .. Slider.Rounding .. 'f', Value))
    end

    function Slider:SetValue(Value)
        Value = math.clamp(tonumber(Value) or Slider.Value, Slider.Min, Slider.Max)
        Slider.Value = Slider:GetValueFromXOffset(self:MapValue(Value, Slider.Min, Slider.Max, 0, Slider.MaxSize))
        Slider:Display()
        self:SafeCallback(Slider.Callback, Slider.Value)
        self:SafeCallback(Slider.Changed, Slider.Value)
        window.Config[Idx] = Slider.Value
    end

    SliderInner.InputBegan:Connect(function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseButton1 and not self:MouseIsOverOpenedFrame() then
            local mPos = Mouse.X
            local gPos = Fill.Size.X.Offset
            local Diff = mPos - (Fill.AbsolutePosition.X + gPos)

            ValueLabel.Visible = true
            TweenService:Create(Handle, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 14, 0, 14)}):Play()

            while UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                local nMPos = Mouse.X
                local nX = math.clamp(gPos + (nMPos - mPos) + Diff, 0, Slider.MaxSize)

                local OldValue = Slider.Value
                Slider.Value = Slider:GetValueFromXOffset(nX)
                Slider:Display()

                if Slider.Value ~= OldValue then
                    self:SafeCallback(Slider.Callback, Slider.Value)
                    self:SafeCallback(Slider.Changed, Slider.Value)
                end

                RunService.RenderStepped:Wait()
            end

            ValueLabel.Visible = false
            TweenService:Create(Handle, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 12, 0, 12)}):Play()
            window.Config[Idx] = Slider.Value
        end
    end)

    Slider:Display()
    section:AddBlank(Info.BlankSize or 6)
    section:Resize()

    return Slider
end

return BlitzXHub
