-- Vérifie si g
if typeof(getgenv) == "function" then
    if not memorystats then
        memorystats = {}
        memorystats.cache = function(_) end
        memorystats.restore = function(_) end
    end

    local cacheCategories = {
        "Internal", "HttpCache", "Instances", "Signals", "Script",
        "PhysicsCollision", "PhysicsParts", "GraphicsSolidModels", "GraphicsMeshParts", "GraphicsParticles",
        "GraphicsParts", "GraphicsSpatialHash", "GraphicsTerrain", "GraphicsTexture", "GraphicsTextureCharacter",
        "Sounds", "StreamingSounds", "TerrainVoxels", "Gui", "Animation", "Navigation", "GeometryCSG"
    }

    local function cacheAll()
        for _, category in ipairs(cacheCategories) do
            pcall(function()
                memorystats.cache(category)
            end)
        end
    end

    local function restoreAll()
        for _, category in ipairs(cacheCategories) do
            pcall(function()
                memorystats.restore(category)
            end)
        end
    end

    -- Mise en cache initiale
    cacheAll()

    -- Rafraîchissement auto toutes les 2 min
    task.spawn(function()
        while task.wait(120) do
            cacheAll()
        end
    end)

    -- Restauration manuelle via console
    getgenv().RestoreMemoryCache = restoreAll
else
    -- Affiche un warning si getgenv n'est pas supporté
    warn("#ERROR_GETGENV()_MISMATCH")

    if not memorystats then
        memorystats = {}
        memorystats.cache = function(a) end
        memorystats.restore = function(a) end
    end
    for _, v in pairs({
        "Internal", "HttpCache", "Instances", "Signals", "Script",
        "PhysicsCollision", "PhysicsParts", "GraphicsSolidModels", "GraphicsMeshParts", "GraphicsParticles",
        "GraphicsParts", "GraphicsSpatialHash", "GraphicsTerrain", "GraphicsTexture", "GraphicsTextureCharacter",
        "Sounds", "StreamingSounds", "TerrainVoxels", "Gui", "Animation", "Navigation", "GeometryCSG"
    }) do
        memorystats.cache(v)
    end
end

local XyloKitUI = {}

-- Services
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")

-- Attendre que le jeu et le joueur soient chargés
local function waitForGameLoaded()
    if not game:IsLoaded() then
        game.Loaded:Wait()
        task.wait(10)
    end
    local player = Players.LocalPlayer
    if not player then
        Players:GetPropertyChangedSignal("LocalPlayer"):Wait()
        player = Players.LocalPlayer
    end
    return player
end

-- Détection de l'exécuteur
local executor = identifyexecutor and identifyexecutor() or "Unknown"
if executor == "Unknown" then
    game.Players.LocalPlayer:Kick("#UNKNOWN_EXECUTOR_404")
    return
end
print("Exécuteur détecté : " .. executor)

-- Configuration initiale
local player = waitForGameLoaded()
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "XyloKitUI"
screenGui.Parent = game:WaitForChild("CoreGui")
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true

-- Thème modernisé (noir et gris-rouge atténué)
local Themes = {
    Dark = {
        MainBackground = Color3.fromRGB(18, 18, 18),
        TabBackground = Color3.fromRGB(24, 24, 24),
        SectionBackground = Color3.fromRGB(30, 30, 30),
        TextColor = Color3.fromRGB(200, 50, 50), -- Rouge atténué
        TextHoverColor = Color3.fromRGB(220, 80, 80), -- Rouge atténué au survol
        BorderColor = Color3.fromRGB(200, 50, 50), -- Rouge atténué pour les bordures
        SelectedTabColor = Color3.fromRGB(200, 50, 50), -- Rouge atténué pour l'indicateur
        ButtonBackground = Color3.fromRGB(28, 28, 28),
        ButtonHoverBackground = Color3.fromRGB(40, 40, 40),
        SelectedTabBackground = Color3.fromRGB(36, 36, 36),
        ShadowColor = Color3.fromRGB(0, 0, 0)
    }
}

local currentTheme = Themes.Dark

-- Gestion de la configuration
local config = {}
local configFileName = "XyloKitUI_Config.json"

local function saveConfig()
    local success, encoded = pcall(HttpService.JSONEncode, HttpService, config)
    if success then
        writefile(configFileName, encoded)
    end
end

local function loadConfig()
    if isfile(configFileName) then
        local success, decoded = pcall(HttpService.JSONDecode, HttpService, readfile(configFileName))
        if success then
            config = decoded
        end
    end
end

loadConfig()

-- Création de la fenêtre principale
function XyloKitUI:CreateWindow(title)
    print("Création de la fenêtre : " .. title)
    local XyloKitUIWindow = {}
    XyloKitUIWindow.Configuration = config

    -- Fond principal
    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 1000, 0, 700)
    mainFrame.Position = UDim2.new(0.5, -500, 0.5, -350)
    mainFrame.BackgroundColor3 = currentTheme.MainBackground
    mainFrame.BorderSizePixel = 0
    mainFrame.ClipsDescendants = true
    mainFrame.Parent = screenGui

    local mainFrameStroke = Instance.new("UIStroke")
    mainFrameStroke.Thickness = 2
    mainFrameStroke.Color = currentTheme.BorderColor
    mainFrameStroke.Parent = mainFrame

    -- Drag-and-drop
    local dragging = false
    local dragStart, startPos

    mainFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    mainFrame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            local delta = input.Position - dragStart
            local newPos = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
            mainFrame.Position = newPos
            config.WindowPosition = {X = newPos.X.Offset, Y = newPos.Y.Offset}
            saveConfig()
        end
    end)

    if config.WindowPosition then
        mainFrame.Position = UDim2.new(0.5, config.WindowPosition.X, 0.5, config.WindowPosition.Y)
    end

    -- Animation d'ouverture
    mainFrame.Position = UDim2.new(0.5, mainFrame.Position.X.Offset, -0.5, 0)
    local tweenOpen = TweenService:Create(mainFrame, TweenInfo.new(0.6, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Position = UDim2.new(0.5, mainFrame.Position.X.Offset, 0.5, -350)})
    tweenOpen:Play()

    -- Titre
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -180, 0, 50)
    titleLabel.Position = UDim2.new(0, 180, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.TextColor3 = currentTheme.TextColor
    titleLabel.TextSize = 24
    titleLabel.Font = Enum.Font.Code
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = mainFrame

    -- Barre latérale pour les onglets
    local tabBar = Instance.new("Frame")
    tabBar.Size = UDim2.new(0, 200, 1, -50)
    tabBar.Position = UDim2.new(0, 0, 0, 50)
    tabBar.BackgroundColor3 = currentTheme.TabBackground
    tabBar.BorderSizePixel = 0
    tabBar.Parent = mainFrame

    local tabBarStroke = Instance.new("UIStroke")
    tabBarStroke.Thickness = 2
    tabBarStroke.Color = currentTheme.BorderColor
    tabBarStroke.Parent = tabBar

    local tabBarLayout = Instance.new("UIListLayout")
    tabBarLayout.FillDirection = Enum.FillDirection.Vertical
    tabBarLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabBarLayout.Padding = UDim.new(0, 8)
    tabBarLayout.Parent = tabBar

    -- Zone de contenu
    local contentFrame = Instance.new("Frame")
    contentFrame.Size = UDim2.new(1, -200, 1, -50)
    contentFrame.Position = UDim2.new(0, 200, 0, 50)
    contentFrame.BackgroundColor3 = currentTheme.MainBackground
    contentFrame.BorderSizePixel = 0
    contentFrame.Parent = mainFrame

    local contentFrameStroke = Instance.new("UIStroke")
    contentFrameStroke.Thickness = 2
    contentFrameStroke.Color = currentTheme.BorderColor
    contentFrameStroke.Parent = contentFrame

    -- Bouton de fermeture
    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 40, 0, 40)
    closeButton.Position = UDim2.new(1, -50, 0, 5)
    closeButton.BackgroundColor3 = currentTheme.ButtonBackground
    closeButton.Text = "✕"
    closeButton.TextColor3 = currentTheme.TextColor
    closeButton.TextSize = 20
    closeButton.Font = Enum.Font.Code
    closeButton.Parent = mainFrame

    local closeStroke = Instance.new("UIStroke")
    closeStroke.Thickness = 2
    closeStroke.Color = currentTheme.BorderColor
    closeStroke.Parent = closeButton

    -- Bouton Paramètres
    local settingsButton = Instance.new("TextButton")
    settingsButton.Size = UDim2.new(0, 40, 0, 40)
    settingsButton.Position = UDim2.new(1, -100, 0, 5)
    settingsButton.BackgroundColor3 = currentTheme.ButtonBackground
    settingsButton.Text = "⚙"
    settingsButton.TextColor3 = currentTheme.TextColor
    settingsButton.TextSize = 20
    settingsButton.Font = Enum.Font.Code
    settingsButton.Parent = mainFrame

    local settingsStroke = Instance.new("UIStroke")
    settingsStroke.Thickness = 2
    settingsStroke.Color = currentTheme.BorderColor
    settingsStroke.Parent = settingsButton

    closeButton.MouseButton1Click:Connect(function()
        local tweenClose = TweenService:Create(mainFrame, TweenInfo.new(0.6, Enum.EasingStyle.Quint, Enum.EasingDirection.In), {Position = UDim2.new(0.5, mainFrame.Position.X.Offset, -0.5, 0)})
        tweenClose:Play()
        tweenClose.Completed:Connect(function()
            screenGui:Destroy()
        end)
    end)

    -- Toggle avec RightShift
    local isMenuOpen = true
    local defaultPosition = UDim2.new(0.5, -500, 0.5, -350)
    local hiddenPosition = UDim2.new(0.5, mainFrame.Position.X.Offset, 2, 0)

    local function toggleMenu()
        isMenuOpen = not isMenuOpen
        local targetPos = isMenuOpen and defaultPosition or hiddenPosition
        local tween = TweenService:Create(mainFrame, TweenInfo.new(0.6, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {Position = targetPos})
        tween:Play()
    end

    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if input.KeyCode == Enum.KeyCode.RightShift then
            toggleMenu()
        end
    end)

    -- Gestion des onglets
    local tabs = {}
    local currentTab = nil
    local settingsTab = nil

    -- Création de l'onglet Paramètres (caché)
    local function createSettingsTab()
        local tab = {}
        tab.Name = "Setting & Visual"

        -- Contenu de l'onglet (pas de bouton dans tabBar)
        local tabContent = Instance.new("Frame")
        tabContent.Size = UDim2.new(1, -20, 1, -110)
        tabContent.Position = UDim2.new(0, 10, 0, 10)
        tabContent.BackgroundTransparency = 1
        tabContent.Parent = contentFrame
        tabContent.Visible = false

        -- Conteneur principal
        local topContainer = Instance.new("Frame")
        topContainer.Size = UDim2.new(1, 0, 0, 0)
        topContainer.Position = UDim2.new(0, 0, 0, 0)
        topContainer.BackgroundTransparency = 1
        topContainer.Parent = tabContent

        local topContainerLayout = Instance.new("UIListLayout")
        topContainerLayout.FillDirection = Enum.FillDirection.Horizontal
        topContainerLayout.SortOrder = Enum.SortOrder.LayoutOrder
        topContainerLayout.Padding = UDim.new(0, 15)
        topContainerLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
        topContainerLayout.Parent = topContainer

        -- Conteneur inférieur
        local bottomContainer = Instance.new("Frame")
        bottomContainer.Size = UDim2.new(1, 0, 0, 0)
        bottomContainer.Position = UDim2.new(0, 0, 0, 0)
        bottomContainer.BackgroundTransparency = 1
        bottomContainer.Parent = tabContent

        local bottomContainerLayout = Instance.new("UIListLayout")
        bottomContainerLayout.FillDirection = Enum.FillDirection.Horizontal
        bottomContainerLayout.SortOrder = Enum.SortOrder.LayoutOrder
        bottomContainerLayout.Padding = UDim.new(0, 15)
        bottomContainerLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
        bottomContainerLayout.Parent = bottomContainer

        -- Ajustement dynamique
        local function updateContainerPositions()
            local maxTopHeight = 0
            for _, child in pairs(topContainer:GetChildren()) do
                if child:IsA("Frame") and child ~= topContainerLayout then
                    maxTopHeight = math.max(maxTopHeight, child.AbsoluteSize.Y)
                end
            end
            topContainer.Size = UDim2.new(1, 0, 0, maxTopHeight)
            bottomContainer.Position = UDim2.new(0, 0, 0, maxTopHeight + 10)
        end

        tab.Content = tabContent
        tab.TopContainer = topContainer
        tab.BottomContainer = bottomContainer
        tabs[tab.Name] = tab
        settingsTab = tab

        -- Créer une section pour les paramètres
        local sectionCount = 0
        local function createSection(name)
            if sectionCount >= 6 then
                warn("Maximum de 6 sections atteint pour cet onglet.")
                return nil
            end
            local section = {}
            section.Name = name

            local sectionFrame = Instance.new("Frame")
            sectionFrame.Size = UDim2.new(0, 250, 0, 300)
            sectionFrame.BackgroundColor3 = currentTheme.SectionBackground
            sectionFrame.BorderSizePixel = 0
            sectionFrame.Parent = (sectionCount < 3 and topContainer or bottomContainer)

            local sectionStroke = Instance.new("UIStroke")
            sectionStroke.Thickness = 2
            sectionStroke.Color = currentTheme.BorderColor
            sectionStroke.Parent = sectionFrame

            local sectionLabel = Instance.new("TextLabel")
            sectionLabel.Size = UDim2.new(1, -20, 0, 30)
            sectionLabel.Position = UDim2.new(0, 10, 0, 10)
            sectionLabel.BackgroundTransparency = 1
            sectionLabel.Text = name
            sectionLabel.TextColor3 = currentTheme.TextColor
            sectionLabel.TextSize = 18
            sectionLabel.Font = Enum.Font.Code
            sectionLabel.TextXAlignment = Enum.TextXAlignment.Center
            sectionLabel.Parent = sectionFrame

            local scrollFrame = Instance.new("ScrollingFrame")
            scrollFrame.Size = UDim2.new(1, -20, 0, 260)
            scrollFrame.Position = UDim2.new(0, 10, 0, 40)
            scrollFrame.BackgroundTransparency = 1
            scrollFrame.BorderSizePixel = 0
            scrollFrame.ScrollBarThickness = 6
            scrollFrame.ScrollBarImageColor3 = currentTheme.BorderColor
            scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
            scrollFrame.Parent = sectionFrame

            local scrollLayout = Instance.new("UIListLayout")
            scrollLayout.SortOrder = Enum.SortOrder.LayoutOrder
            scrollLayout.Padding = UDim.new(0, 8)
            scrollLayout.Parent = scrollFrame

            local sectionPadding = Instance.new("UIPadding")
            sectionPadding.PaddingLeft = UDim.new(0, 10)
            sectionPadding.PaddingTop = UDim.new(0, 0)
            sectionPadding.PaddingBottom = UDim.new(0, 10)
            sectionPadding.Parent = scrollFrame

            scrollLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                scrollFrame.CanvasSize = UDim2.new(0, 0, 0, scrollLayout.AbsoluteContentSize.Y)
                updateContainerPositions()
            end)

            sectionCount = sectionCount + 1
            section.Frame = sectionFrame

            -- Ajout du toggle
            function section:CreateToggle(name, default, callback)
                local toggleFrame = Instance.new("Frame")
                toggleFrame.Size = UDim2.new(1, -20, 0, 35)
                toggleFrame.BackgroundTransparency = 1
                toggleFrame.Parent = scrollFrame

                local toggleLabel = Instance.new("TextLabel")
                toggleLabel.Size = UDim2.new(0.7, 0, 1, 0)
                toggleLabel.Position = UDim2.new(0, 5, 0, 0)
                toggleLabel.BackgroundTransparency = 1
                toggleLabel.Text = name
                toggleLabel.TextColor3 = currentTheme.TextColor
                toggleLabel.TextSize = 16
                toggleLabel.Font = Enum.Font.Code
                toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
                toggleLabel.Parent = toggleFrame

                local toggleButton = Instance.new("TextButton")
                toggleButton.Size = UDim2.new(0, 30, 0, 30)
                toggleButton.Position = UDim2.new(1, -35, 0, 2)
                toggleButton.BackgroundColor3 = default and currentTheme.TextColor or currentTheme.ButtonBackground
                toggleButton.Text = default and "✔" or ""
                toggleButton.TextColor3 = Color3.fromRGB(0, 200, 0)
                toggleButton.TextSize = 18
                toggleButton.Font = Enum.Font.Code
                toggleButton.BorderSizePixel = 0
                toggleButton.Parent = toggleFrame

                local toggleStroke = Instance.new("UIStroke")
                toggleStroke.Thickness = 2
                toggleStroke.Color = currentTheme.BorderColor
                toggleStroke.Parent = toggleButton

                local state = default
                local configKey = tab.Name .. "_" .. section.Name .. "_" .. name .. "_Toggle"
                if config[configKey] ~= nil then
                    state = config[configKey]
                    toggleButton.BackgroundColor3 = state and currentTheme.TextColor or currentTheme.ButtonBackground
                    toggleButton.Text = state and "✔" or ""
                end

                toggleButton.MouseEnter:Connect(function()
                    local tweenHover = TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = state and currentTheme.TextHoverColor or currentTheme.ButtonHoverBackground})
                    tweenHover:Play()
                end)

                toggleButton.MouseLeave:Connect(function()
                    local tweenLeave = TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = state and currentTheme.TextColor or currentTheme.ButtonBackground})
                    tweenLeave:Play()
                end)

                toggleButton.MouseButton1Click:Connect(function()
                    state = not state
                    toggleButton.BackgroundColor3 = state and currentTheme.TextColor or currentTheme.ButtonBackground
                    toggleButton.Text = state and "✔" or ""
                    config[configKey] = state
                    saveConfig()
                    callback(state)
                end)
            end

            -- Ajout du ColorPicker
            function section:CreateColorPicker(name, default, callback)
                local colorPickerFrame = Instance.new("Frame")
                colorPickerFrame.Size = UDim2.new(1, -20, 0, 35)
                colorPickerFrame.BackgroundTransparency = 1
                colorPickerFrame.Parent = scrollFrame

                local colorPickerLabel = Instance.new("TextLabel")
                colorPickerLabel.Size = UDim2.new(0.7, 0, 1, 0)
                colorPickerLabel.Position = UDim2.new(0, 5, 0, 0)
                colorPickerLabel.BackgroundTransparency = 1
                colorPickerLabel.Text = name
                colorPickerLabel.TextColor3 = currentTheme.TextColor
                colorPickerLabel.TextSize = 16
                colorPickerLabel.Font = Enum.Font.Code
                colorPickerLabel.TextXAlignment = Enum.TextXAlignment.Left
                colorPickerLabel.Parent = colorPickerFrame

                local colorPreview = Instance.new("Frame")
                colorPreview.Size = UDim2.new(0, 30, 0, 30)
                colorPreview.Position = UDim2.new(1, -35, 0, 2)
                colorPreview.BackgroundColor3 = default
                colorPreview.BorderSizePixel = 0
                colorPreview.Parent = colorPickerFrame

                local colorPreviewStroke = Instance.new("UIStroke")
                colorPreviewStroke.Thickness = 2
                colorPreviewStroke.Color = currentTheme.BorderColor
                colorPreviewStroke.Parent = colorPreview

                local colorPickerButton = Instance.new("TextButton")
                colorPickerButton.Size = UDim2.new(0, 30, 0, 30)
                colorPickerButton.Position = UDim2.new(1, -35, 0, 2)
                colorPickerButton.BackgroundTransparency = 1
                colorPickerButton.Text = ""
                colorPickerButton.Parent = colorPickerFrame

                local colorPickerWindow = Instance.new("Frame")
                colorPickerWindow.Size = UDim2.new(0, 200, 0, 150)
                colorPickerWindow.Position = UDim2.new(1, -235, 0, 35)
                colorPickerWindow.BackgroundColor3 = currentTheme.ButtonBackground
                colorPickerWindow.Visible = false
                colorPickerWindow.Parent = colorPickerFrame

                local colorPickerStroke = Instance.new("UIStroke")
                colorPickerStroke.Thickness = 2
                colorPickerStroke.Color = currentTheme.BorderColor
                colorPickerStroke.Parent = colorPickerWindow

                -- Palette de couleur (simplifiée)
                local hueBar = Instance.new("Frame")
                hueBar.Size = UDim2.new(0, 20, 1, -40)
                hueBar.Position = UDim2.new(0, 10, 0, 10)
                hueBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                hueBar.Parent = colorPickerWindow

                local hueGradient = Instance.new("UIGradient")
                hueGradient.Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                    ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)),
                    ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)),
                    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
                    ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)),
                    ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
                })
                hueGradient.Parent = hueBar

                local saturationBrightness = Instance.new("Frame")
                saturationBrightness.Size = UDim2.new(0, 150, 1, -40)
                saturationBrightness.Position = UDim2.new(0, 40, 0, 10)
                saturationBrightness.BackgroundColor3 = default
                saturationBrightness.Parent = colorPickerWindow

                local saturationGradient = Instance.new("UIGradient")
                saturationGradient.Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                    ColorSequenceKeypoint.new(1, default)
                })
                saturationGradient.Rotation = 0
                saturationGradient.Parent = saturationBrightness

                local brightnessGradient = Instance.new("UIGradient")
                brightnessGradient.Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0, 0)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
                })
                brightnessGradient.Rotation = 90
                brightnessGradient.Parent = saturationBrightness

                local saturationBrightnessStroke = Instance.new("UIStroke")
                saturationBrightnessStroke.Thickness = 2
                saturationBrightnessStroke.Color = currentTheme.BorderColor
                saturationBrightnessStroke.Parent = saturationBrightness

                local configKey = tab.Name .. "_" .. section.Name .. "_" .. name .. "_ColorPicker"
                local currentColor = default
                if config[configKey] then
                    currentColor = Color3.new(config[configKey].R, config[configKey].G, config[configKey].B)
                    colorPreview.BackgroundColor3 = currentColor
                end

                local function updateColor(hue, sat, val)
                    local color = Color3.fromHSV(hue, sat, val)
                    colorPreview.BackgroundColor3 = color
                    saturationBrightness.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
                    saturationGradient.Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                        ColorSequenceKeypoint.new(1, Color3.fromHSV(hue, 1, 1))
                    })
                    config[configKey] = {R = color.R, G = color.G, B = color.B}
                    saveConfig()
                    callback(color)
                end

                local draggingHue = false
                local draggingSB = false

                hueBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        draggingHue = true
                    end
                end)

                hueBar.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        draggingHue = false
                    end
                end)

                saturationBrightness.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        draggingSB = true
                    end
                end)

                saturationBrightness.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        draggingSB = false
                    end
                end)

                UserInputService.InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        if draggingHue then
                            local mousePos = UserInputService:GetMouseLocation()
                            local relativePos = (mousePos.Y - hueBar.AbsolutePosition.Y) / hueBar.AbsoluteSize.Y
                            relativePos = math.clamp(relativePos, 0, 1)
                            local hue = relativePos
                            local h, s, v = currentColor:ToHSV()
                            updateColor(hue, s, v)
                            currentColor = Color3.fromHSV(hue, s, v)
                        elseif draggingSB then
                            local mousePos = UserInputService:GetMouseLocation()
                            local relativeX = (mousePos.X - saturationBrightness.AbsolutePosition.X) / saturationBrightness.AbsoluteSize.X
                            local relativeY = (mousePos.Y - saturationBrightness.AbsolutePosition.Y) / saturationBrightness.AbsoluteSize.Y
                            relativeX = math.clamp(relativeX, 0, 1)
                            relativeY = math.clamp(relativeY, 0, 1)
                            local h, _, _ = currentColor:ToHSV()
                            local sat = relativeX
                            local val = 1 - relativeY
                            updateColor(h, sat, val)
                            currentColor = Color3.fromHSV(h, sat, val)
                        end
                    end
                end)

                colorPickerButton.MouseButton1Click:Connect(function()
                    colorPickerWindow.Visible = not colorPickerWindow.Visible
                end)

                colorPickerButton.MouseEnter:Connect(function()
                    local tweenHover = TweenService:Create(colorPreview, TweenInfo.new(0.2), {BackgroundColor3 = currentColor:Lerp(currentTheme.TextHoverColor, 0.2)})
                    tweenHover:Play()
                end)

                colorPickerButton.MouseLeave:Connect(function()
                    local tweenLeave = TweenService:Create(colorPreview, TweenInfo.new(0.2), {BackgroundColor3 = currentColor})
                    tweenLeave:Play()
                end)
            end

            return section
        end

        -- Créer la section et le toggle Auto Safe Execute
        local paramSection = createSection("Setting & Visual")
        if paramSection then
            paramSection:CreateToggle("FPS boost", false, function(state)
                config["FPS_Boost"] = state
                saveConfig()
                if state then
                    pcall(function()
                        loadstring(game:HttpGet("https://pastebin.com/raw/UJ0nXJQZ"))()
                    end)
                end
            end)

            -- Ajout du ColorPicker pour changer la couleur du texte
            paramSection:CreateColorPicker("Text Color", currentTheme.TextColor, function(color)
                currentTheme.TextColor = color
                currentTheme.TextHoverColor = color:Lerp(Color3.new(1, 1, 1), 0.2) -- Ajuste la couleur de survol
                -- Mettre à jour dynamiquement les éléments de l'interface
                for _, tab in pairs(tabs) do
                    if tab.Button then
                        tab.Button.TextColor3 = color
                    end
                    if tab.Content then
                        for _, child in pairs(tab.Content:GetDescendants()) do
                            if child:IsA("TextLabel") or child:IsA("TextButton") then
                                child.TextColor3 = color
                            end
                        end
                    end
                end
                titleLabel.TextColor3 = color
                closeButton.TextColor3 = color
                settingsButton.TextColor3 = color
                playerName.TextColor3 = color
                saveConfig()
            end)
        end

        return tab
    end

    -- Créer l'onglet Paramètres dès l'initialisation
    createSettingsTab()

    -- Lier le bouton Paramètres au changement d'onglet
    settingsButton.MouseEnter:Connect(function()
        settingsButton.BackgroundColor3 = currentTheme.ButtonHoverBackground
    end)

    settingsButton.MouseLeave:Connect(function()
        settingsButton.BackgroundColor3 = currentTheme.ButtonBackground
    end)

    settingsButton.MouseButton1Click:Connect(function()
        if settingsTab and currentTab ~= settingsTab then
            if currentTab then
                currentTab.Content.Visible = false
                if currentTab.Indicator then
                    currentTab.Indicator.Visible = false
                    currentTab.Button.BackgroundColor3 = currentTheme.TabBackground
                end
            end
            settingsTab.Content.Visible = true
            currentTab = settingsTab
        end
    end)

    -- Création d'un onglet
    function XyloKitUIWindow:CreateTab(name)
        print("Création de l'onglet : " .. name)
        local tab = {}
        tab.Name = name

        -- Bouton de l'onglet
        local tabButton = Instance.new("TextButton")
        tabButton.Size = UDim2.new(1, -10, 0, 40)
        tabButton.BackgroundColor3 = currentTheme.TabBackground
        tabButton.Text = name
        tabButton.TextColor3 = currentTheme.TextColor
        tabButton.TextSize = 16
        tabButton.Font = Enum.Font.Code
        tabButton.BorderSizePixel = 0
        tabButton.Parent = tabBar

        local tabStroke = Instance.new("UIStroke")
        tabStroke.Thickness = 0.5
        tabStroke.Color = currentTheme.BorderColor
        tabStroke.Parent = tabButton

        -- Indicateur de sélection
        local tabIndicator = Instance.new("Frame")
        tabIndicator.Size = UDim2.new(0, 4, 1, 0)
        tabIndicator.Position = UDim2.new(0, 0, 0, 0)
        tabIndicator.BackgroundColor3 = currentTheme.SelectedTabColor
        tabIndicator.BorderSizePixel = 0
        tabIndicator.Visible = false
        tabIndicator.Parent = tabButton

        -- Effet de survol
        tabButton.MouseEnter:Connect(function()
            if currentTab ~= tab then
                tabButton.BackgroundColor3 = currentTheme.ButtonHoverBackground
            end
        end)

        tabButton.MouseLeave:Connect(function()
            if currentTab ~= tab then
                tabButton.BackgroundColor3 = currentTheme.TabBackground
            end
        end)

        -- Contenu de l'onglet
        local tabContent = Instance.new("Frame")
        tabContent.Size = UDim2.new(1, -20, 1, -110)
        tabContent.Position = UDim2.new(0, 10, 0, 10)
        tabContent.BackgroundTransparency = 1
        tabContent.Parent = contentFrame
        tabContent.Visible = false

        -- Conteneur principal
        local topContainer = Instance.new("Frame")
        topContainer.Size = UDim2.new(1, 0, 0, 0)
        topContainer.Position = UDim2.new(0, 0, 0, 0)
        topContainer.BackgroundTransparency = 1
        topContainer.Parent = tabContent

        local topContainerLayout = Instance.new("UIListLayout")
        topContainerLayout.FillDirection = Enum.FillDirection.Horizontal
        topContainerLayout.SortOrder = Enum.SortOrder.LayoutOrder
        topContainerLayout.Padding = UDim.new(0, 15)
        topContainerLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
        topContainerLayout.Parent = topContainer

        -- Conteneur inférieur
        local bottomContainer = Instance.new("Frame")
        bottomContainer.Size = UDim2.new(1, 0, 0, 0)
        bottomContainer.Position = UDim2.new(0, 0, 0, 0)
        bottomContainer.BackgroundTransparency = 1
        bottomContainer.Parent = tabContent

        local bottomContainerLayout = Instance.new("UIListLayout")
        bottomContainerLayout.FillDirection = Enum.FillDirection.Horizontal
        bottomContainerLayout.SortOrder = Enum.SortOrder.LayoutOrder
        bottomContainerLayout.Padding = UDim.new(0, 15)
        bottomContainerLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
        bottomContainerLayout.Parent = bottomContainer

        -- Ajustement dynamique
        local function updateContainerPositions()
            local maxTopHeight = 0
            for _, child in pairs(topContainer:GetChildren()) do
                if child:IsA("Frame") and child ~= topContainerLayout then
                    maxTopHeight = math.max(maxTopHeight, child.AbsoluteSize.Y)
                end
            end
            topContainer.Size = UDim2.new(1, 0, 0, maxTopHeight)
            bottomContainer.Position = UDim2.new(0, 0, 0, maxTopHeight + 10)
        end

        tab.Button = tabButton
        tab.Content = tabContent
        tab.TopContainer = topContainer
        tab.BottomContainer = bottomContainer
        tab.Indicator = tabIndicator
        tabs[name] = tab

        -- Gestion du clic
        tabButton.MouseButton1Click:Connect(function()
            if currentTab ~= tab then
                if currentTab then
                    currentTab.Content.Visible = false
                    if currentTab.Indicator then
                        currentTab.Indicator.Visible = false
                        currentTab.Button.BackgroundColor3 = currentTheme.TabBackground
                    end
                end
                tabButton.BackgroundColor3 = currentTheme.SelectedTabBackground
                tabIndicator.Visible = true
                tabContent.Visible = true
                currentTab = tab
                updateContainerPositions()
            end
        end)

        -- Création d'une section
        local sectionCount = 0
        function tab:CreateSection(name)
            if sectionCount >= 6 then
                warn("Maximum de 6 sections atteint pour cet onglet.")
                return nil
            end
            print("Création de la section : " .. name)
            local section = {}
            section.Name = name

            local sectionFrame = Instance.new("Frame")
            sectionFrame.Size = UDim2.new(0, 250, 0, 300)
            sectionFrame.BackgroundColor3 = currentTheme.SectionBackground
            sectionFrame.BorderSizePixel = 0
            sectionFrame.Parent = (sectionCount < 3 and topContainer or bottomContainer)

            local sectionStroke = Instance.new("UIStroke")
            sectionStroke.Thickness = 2
            sectionStroke.Color = currentTheme.BorderColor
            sectionStroke.Parent = sectionFrame

            local sectionLabel = Instance.new("TextLabel")
            sectionLabel.Size = UDim2.new(1, -20, 0, 30)
            sectionLabel.Position = UDim2.new(0, 10, 0, 10)
            sectionLabel.BackgroundTransparency = 1
            sectionLabel.Text = name
            sectionLabel.TextColor3 = currentTheme.TextColor
            sectionLabel.TextSize = 18
            sectionLabel.Font = Enum.Font.Code
            sectionLabel.TextXAlignment = Enum.TextXAlignment.Center
            sectionLabel.Parent = sectionFrame

            local scrollFrame = Instance.new("ScrollingFrame")
            scrollFrame.Size = UDim2.new(1, -20, 0, 260)
            scrollFrame.Position = UDim2.new(0, 10, 0, 40)
            scrollFrame.BackgroundTransparency = 1
            scrollFrame.BorderSizePixel = 0
            scrollFrame.ScrollBarThickness = 6
            scrollFrame.ScrollBarImageColor3 = currentTheme.BorderColor
            scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
            scrollFrame.Parent = sectionFrame

            local scrollLayout = Instance.new("UIListLayout")
            scrollLayout.SortOrder = Enum.SortOrder.LayoutOrder
            scrollLayout.Padding = UDim.new(0, 8)
            scrollLayout.Parent = scrollFrame

            local sectionPadding = Instance.new("UIPadding")
            sectionPadding.PaddingLeft = UDim.new(0, 10)
            sectionPadding.PaddingTop = UDim.new(0, 0)
            sectionPadding.PaddingBottom = UDim.new(0, 10)
            sectionPadding.Parent = scrollFrame

            scrollLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                scrollFrame.CanvasSize = UDim2.new(0, 0, 0, scrollLayout.AbsoluteContentSize.Y)
                updateContainerPositions()
            end)

            sectionCount = sectionCount + 1
            section.Frame = sectionFrame

            -- Création d'un toggle
            function section:CreateToggle(name, default, callback)
                local toggleFrame = Instance.new("Frame")
                toggleFrame.Size = UDim2.new(1, -20, 0, 35)
                toggleFrame.BackgroundTransparency = 1
                toggleFrame.Parent = scrollFrame

                local toggleLabel = Instance.new("TextLabel")
                toggleLabel.Size = UDim2.new(0.7, 0, 1, 0)
                toggleLabel.Position = UDim2.new(0, 5, 0, 0)
                toggleLabel.BackgroundTransparency = 1
                toggleLabel.Text = name
                toggleLabel.TextColor3 = currentTheme.TextColor
                toggleLabel.TextSize = 16
                toggleLabel.Font = Enum.Font.Code
                toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
                toggleLabel.Parent = toggleFrame

                local toggleButton = Instance.new("TextButton")
                toggleButton.Size = UDim2.new(0, 30, 0, 30)
                toggleButton.Position = UDim2.new(1, -35, 0, 2)
                toggleButton.BackgroundColor3 = default and currentTheme.TextColor or currentTheme.ButtonBackground
                toggleButton.Text = default and " ✔" or ""
                toggleButton.TextColor3 = Color3.fromRGB(0, 200, 0)
                toggleButton.TextSize = 18
                toggleButton.Font = Enum.Font.Code
                toggleButton.BorderSizePixel = 0
                toggleButton.Parent = toggleFrame

                local toggleStroke = Instance.new("UIStroke")
                toggleStroke.Thickness = 2
                toggleStroke.Color = currentTheme.BorderColor
                toggleStroke.Parent = toggleButton

                local state = default
                local configKey = tab.Name .. "_" .. section.Name .. "_" .. name .. "_Toggle"
                if config[configKey] ~= nil then
                    state = config[configKey]
                    toggleButton.BackgroundColor3 = state and currentTheme.TextColor or currentTheme.ButtonBackground
                    toggleButton.Text = state and "✔" or ""
                end

                toggleButton.MouseEnter:Connect(function()
                    local tweenHover = TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = state and currentTheme.TextHoverColor or currentTheme.ButtonHoverBackground})
                    tweenHover:Play()
                end)

                toggleButton.MouseLeave:Connect(function()
                    local tweenLeave = TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = state and currentTheme.TextColor or currentTheme.ButtonBackground})
                    tweenLeave:Play()
                end)

                toggleButton.MouseButton1Click:Connect(function()
                    state = not state
                    toggleButton.BackgroundColor3 = state and currentTheme.TextColor or currentTheme.ButtonBackground
                    toggleButton.Text = state and "✔" or ""
                    config[configKey] = state
                    saveConfig()
                    callback(state)
                end)
            end

            -- Création d'un slider
            function section:CreateSlider(name, min, max, default, callback)
                local sliderFrame = Instance.new("Frame")
                sliderFrame.Size = UDim2.new(1, -20, 0, 50)
                sliderFrame.BackgroundTransparency = 1
                sliderFrame.Parent = scrollFrame

                local sliderLabel = Instance.new("TextLabel")
                sliderLabel.Size = UDim2.new(0.6, 0, 0, 20)
                sliderLabel.Position = UDim2.new(0, 5, 0, 0)
                sliderLabel.BackgroundTransparency = 1
                sliderLabel.Text = name .. ": " .. default
                sliderLabel.TextColor3 = currentTheme.TextColor
                sliderLabel.TextSize = 16
                sliderLabel.Font = Enum.Font.Code
                sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
                sliderLabel.Parent = sliderFrame

                local sliderBar = Instance.new("Frame")
                sliderBar.Size = UDim2.new(1, -10, 0, 6)
                sliderBar.Position = UDim2.new(0, 5, 0, 30)
                sliderBar.BackgroundColor3 = currentTheme.ButtonBackground
                sliderBar.Parent = sliderFrame

                local sliderBarStroke = Instance.new("UIStroke")
                sliderBarStroke.Thickness = 2
                sliderBarStroke.Color = currentTheme.BorderColor
                sliderBarStroke.Parent = sliderBar

                local sliderFill = Instance.new("Frame")
                sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
                sliderFill.BackgroundColor3 = currentTheme.TextColor
                sliderFill.BorderSizePixel = 0
                sliderFill.Parent = sliderBar

                local sliderFillStroke = Instance.new("UIStroke")
                sliderFillStroke.Thickness = 2
                sliderFillStroke.Color = currentTheme.BorderColor
                sliderFillStroke.Parent = sliderFill

                local sliderButton = Instance.new("TextButton")
                sliderButton.Size = UDim2.new(0, 16, 0, 16)
                sliderButton.Position = UDim2.new((default - min) / (max - min), -8, 0, -5)
                sliderButton.BackgroundColor3 = currentTheme.TextColor
                sliderButton.Text = ""
                sliderButton.Font = Enum.Font.Code
                sliderButton.Parent = sliderBar

                local sliderButtonStroke = Instance.new("UIStroke")
                sliderButtonStroke.Thickness = 2
                sliderButtonStroke.Color = currentTheme.BorderColor
                sliderButtonStroke.Parent = sliderButton

                local configKey = tab.Name .. "_" .. section.Name .. "_" .. name .. "_Slider"
                if config[configKey] ~= nil then
                    default = config[configKey]
                    sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
                    sliderButton.Position = UDim2.new((default - min) / (max - min), -8, 0, -5)
                    sliderLabel.Text = name .. ": " .. default
                end

                local dragging = false
                sliderButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                    end
                end)

                sliderButton.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)

                UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local mousePos = UserInputService:GetMouseLocation()
                        local relativePos = (mousePos.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X
                        relativePos = math.clamp(relativePos, 0, 1)
                        local value = math.floor(min + (max - min) * relativePos)
                        sliderFill.Size = UDim2.new(relativePos, 0, 1, 0)
                        sliderButton.Position = UDim2.new(relativePos, -8, 0, -5)
                        sliderLabel.Text = name .. ": " .. value
                        config[configKey] = value
                        saveConfig()
                        callback(value)
                    end
                end)
            end

            -- Création d'un dropdown
            function section:CreateDropdown(name, options, default, callback)
                local dropdownFrame = Instance.new("Frame")
                dropdownFrame.Size = UDim2.new(1, -20, 0, 35)
                dropdownFrame.BackgroundTransparency = 1
                dropdownFrame.Parent = scrollFrame

                local dropdownLabel = Instance.new("TextLabel")
                dropdownLabel.Size = UDim2.new(0.7, 0, 1, 0)
                dropdownLabel.Position = UDim2.new(0, 5, 0, 0)
                dropdownLabel.BackgroundTransparency = 1
                dropdownLabel.Text = name .. ": " .. default
                dropdownLabel.TextColor3 = currentTheme.TextColor
                dropdownLabel.TextSize = 16
                dropdownLabel.Font = Enum.Font.Code
                dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
                dropdownLabel.Parent = dropdownFrame

                local dropdownButton = Instance.new("TextButton")
                dropdownButton.Size = UDim2.new(0, 30, 0, 30)
                dropdownButton.Position = UDim2.new(1, -35, 0, 2)
                dropdownButton.BackgroundColor3 = currentTheme.ButtonBackground
                dropdownButton.Text = "▼"
                dropdownButton.TextColor3 = currentTheme.TextColor
                dropdownButton.TextSize = 14
                dropdownButton.Font = Enum.Font.Code
                dropdownButton.BorderSizePixel = 0
                dropdownButton.Parent = dropdownFrame

                local dropdownButtonStroke = Instance.new("UIStroke")
                dropdownButtonStroke.Thickness = 2
                dropdownButtonStroke.Color = currentTheme.BorderColor
                dropdownButtonStroke.Parent = dropdownButton

                dropdownButton.MouseEnter:Connect(function()
                    dropdownButton.BackgroundColor3 = currentTheme.ButtonHoverBackground
                end)

                dropdownButton.MouseLeave:Connect(function()
                    dropdownButton.BackgroundColor3 = currentTheme.ButtonBackground
                end)

                local dropdownList = Instance.new("ScrollingFrame")
                dropdownList.Size = UDim2.new(0.6, 20, 0, 0)
                dropdownList.Position = UDim2.new(0.4, -1, 1, 5)
                dropdownList.BackgroundColor3 = currentTheme.ButtonBackground
                dropdownList.Visible = false
                dropdownList.ScrollBarThickness = 4
                dropdownList.ScrollBarImageColor3 = currentTheme.BorderColor
                dropdownList.CanvasSize = UDim2.new(0, 0, 0, #options * 30)
                dropdownList.Parent = dropdownFrame

                local dropdownListStroke = Instance.new("UIStroke")
                dropdownListStroke.Thickness = 2
                dropdownListStroke.Color = currentTheme.BorderColor
                dropdownListStroke.Parent = dropdownList

                local dropdownListLayout = Instance.new("UIListLayout")
                dropdownListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                dropdownListLayout.Padding = UDim.new(0, 5)
                dropdownListLayout.Parent = dropdownList

                local configKey = tab.Name .. "_" .. section.Name .. "_" .. name .. "_Dropdown"
                if config[configKey] ~= nil then
                    default = config[configKey]
                    dropdownLabel.Text = name .. ": " .. default
                end

                for _, option in pairs(options) do
                    local optionButton = Instance.new("TextButton")
                    optionButton.Size = UDim2.new(1, -10, 0, 30)
                    optionButton.BackgroundColor3 = currentTheme.ButtonBackground
                    optionButton.Text = option
                    optionButton.TextColor3 = currentTheme.TextColor
                    optionButton.TextSize = 14
                    optionButton.Font = Enum.Font.Code
                    optionButton.BorderSizePixel = 0
                    optionButton.Parent = dropdownList

                    optionButton.MouseEnter:Connect(function()
                        optionButton.BackgroundColor3 = currentTheme.ButtonHoverBackground
                    end)

                    optionButton.MouseLeave:Connect(function()
                        optionButton.BackgroundColor3 = currentTheme.ButtonBackground
                    end)

                    optionButton.MouseButton1Click:Connect(function()
                        dropdownLabel.Text = name .. ": " .. option
                        dropdownList.Size = UDim2.new(0.5, 0, 0, 0)
                        dropdownList.Visible = false
                        config[configKey] = option
                        saveConfig()
                        callback(option)
                    end)
                end

                dropdownButton.MouseButton1Click:Connect(function()
                    dropdownList.Visible = not dropdownList.Visible
                    local targetSize = dropdownList.Visible and UDim2.new(0.6, 15, 0, math.min(#options * 25, 120)) or UDim2.new(0.5, 0, 0, 0)
                    dropdownList.Size = targetSize
                end)
            end

            -- Création d'un ColorPicker
            function section:CreateColorPicker(name, default, callback)
    local TweenService = game:GetService("TweenService")
    local UserInputService = game:GetService("UserInputService")
    
    -- Cadre principal du ColorPicker
    local colorPickerFrame = Instance.new("Frame")
    colorPickerFrame.Size = UDim2.new(1, -20, 0, 50) -- Hauteur augmentée pour les champs RGB
    colorPickerFrame.BackgroundTransparency = 1
    colorPickerFrame.Parent = scrollFrame

    local colorPickerLabel = Instance.new("TextLabel")
    colorPickerLabel.Size = UDim2.new(0.6, 0, 0, 20)
    colorPickerLabel.Position = UDim2.new(0, 5, 0, 5)
    colorPickerLabel.BackgroundTransparency = 1
    colorPickerLabel.Text = name
    colorPickerLabel.TextColor3 = currentTheme and currentTheme.TextColor or Color3.fromRGB(200, 50, 50)
    colorPickerLabel.TextSize = 16
    colorPickerLabel.Font = Enum.Font.Code
    colorPickerLabel.TextXAlignment = Enum.TextXAlignment.Left
    colorPickerLabel.Parent = colorPickerFrame

    local colorPreview = Instance.new("Frame")
    colorPreview.Size = UDim2.new(0, 40, 0, 40)
    colorPreview.Position = UDim2.new(1, -45, 0, 5)
    colorPreview.BackgroundColor3 = default
    colorPreview.BorderSizePixel = 0
    colorPreview.Parent = colorPickerFrame

    local colorPreviewStroke = Instance.new("UIStroke")
    colorPreviewStroke.Thickness = 2
    colorPreviewStroke.Color = currentTheme and currentTheme.BorderColor or Color3.fromRGB(200, 50, 50)
    colorPreviewStroke.Parent = colorPreview

    local colorPickerButton = Instance.new("TextButton")
    colorPickerButton.Size = UDim2.new(0, 40, 0, 40)
    colorPickerButton.Position = UDim2.new(1, -45, 0, 5)
    colorPickerButton.BackgroundTransparency = 1
    colorPickerButton.Text = ""
    colorPickerButton.Parent = colorPickerFrame

    -- Fenêtre du ColorPicker
    local colorPickerWindow = Instance.new("Frame")
    colorPickerWindow.Size = UDim2.new(0, 220, 0, 220) -- Fenêtre plus grande pour plus de précision
    colorPickerWindow.Position = UDim2.new(1, -225, 0, 50)
    colorPickerWindow.BackgroundColor3 = currentTheme and currentTheme.SectionBackground or Color3.fromRGB(30, 30, 30)
    colorPickerWindow.Visible = false
    colorPickerWindow.ClipsDescendants = true
    colorPickerWindow.Parent = colorPickerFrame

    local colorPickerStroke = Instance.new("UIStroke")
    colorPickerStroke.Thickness = 2
    colorPickerStroke.Color = currentTheme and currentTheme.BorderColor or Color3.fromRGB(200, 50, 50)
    colorPickerStroke.Parent = colorPickerWindow

    -- Zone de saturation/luminosité (carré 140x140)
    local svPicker = Instance.new("Frame")
    svPicker.Size = UDim2.new(0, 140, 0, 140)
    svPicker.Position = UDim2.new(0, 10, 0, 10)
    svPicker.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    svPicker.Parent = colorPickerWindow

    local svGradient = Instance.new("UIGradient")
    svGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
    })
    svGradient.Rotation = 0
    svGradient.Parent = svPicker

    local brightnessGradient = Instance.new("UIGradient")
    brightnessGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0, 0)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
    })
    brightnessGradient.Rotation = 90
    brightnessGradient.Parent = svPicker

    local svStroke = Instance.new("UIStroke")
    svStroke.Thickness = 2
    svStroke.Color = currentTheme and currentTheme.BorderColor or Color3.fromRGB(200, 50, 50)
    svStroke.Parent = svPicker

    -- Curseur pour saturation/luminosité
    local svCursor = Instance.new("Frame")
    svCursor.Size = UDim2.new(0, 10, 0, 10)
    svCursor.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    svCursor.BorderSizePixel = 0
    svCursor.Parent = svPicker
    local svCursorCorner = Instance.new("UICorner")
    svCursorCorner.CornerRadius = UDim.new(0.5, 0)
    svCursorCorner.Parent = svCursor
    local svCursorStroke = Instance.new("UIStroke")
    svCursorStroke.Thickness = 1
    svCursorStroke.Color = Color3.fromRGB(0, 0, 0)
    svCursorStroke.Parent = svCursor

    -- Barre de teinte (30x140)
    local hueBar = Instance.new("Frame")
    hueBar.Size = UDim2.new(0, 30, 0, 140)
    hueBar.Position = UDim2.new(0, 160, 0, 10)
    hueBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    hueBar.Parent = colorPickerWindow

    local hueGradient = Instance.new("UIGradient")
    hueGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
        ColorSequenceKeypoint.new(0.167, Color3.fromRGB(255, 255, 0)),
        ColorSequenceKeypoint.new(0.333, Color3.fromRGB(0, 255, 0)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
        ColorSequenceKeypoint.new(0.667, Color3.fromRGB(0, 0, 255)),
        ColorSequenceKeypoint.new(0.833, Color3.fromRGB(255, 0, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
    })
    hueGradient.Rotation = 90
    hueGradient.Parent = hueBar

    local hueStroke = Instance.new("UIStroke")
    hueStroke.Thickness = 2
    hueStroke.Color = currentTheme and currentTheme.BorderColor or Color3.fromRGB(200, 50, 50)
    hueStroke.Parent = hueBar

    -- Curseur pour la teinte
    local hueCursor = Instance.new("Frame")
    hueCursor.Size = UDim2.new(1, 0, 0, 6)
    hueCursor.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    hueCursor.BorderSizePixel = 0
    hueCursor.Parent = hueBar
    local hueCursorStroke = Instance.new("UIStroke")
    hueCursorStroke.Thickness = 1
    hueCursorStroke.Color = Color3.fromRGB(0, 0, 0)
    hueCursorStroke.Parent = hueCursor

    -- Champs RGB
    local rgbFrame = Instance.new("Frame")
    rgbFrame.Size = UDim2.new(1, -20, 0, 30)
    rgbFrame.Position = UDim2.new(0, 10, 0, 160)
    rgbFrame.BackgroundTransparency = 1
    rgbFrame.Parent = colorPickerWindow

    local function createRGBInput(label, posX, key)
        local inputFrame = Instance.new("Frame")
        inputFrame.Size = UDim2.new(0, 60, 0, 30)
        inputFrame.Position = UDim2.new(0, posX, 0, 0)
        inputFrame.BackgroundTransparency = 1
        inputFrame.Parent = rgbFrame

        local inputLabel = Instance.new("TextLabel")
        inputLabel.Size = UDim2.new(0, 20, 1, 0)
        inputLabel.BackgroundTransparency = 1
        inputLabel.Text = label
        inputLabel.TextColor3 = currentTheme and currentTheme.TextColor or Color3.fromRGB(200, 50, 50)
        inputLabel.TextSize = 14
        inputLabel.Font = Enum.Font.Code
        inputLabel.Parent = inputFrame

        local inputBox = Instance.new("TextBox")
        inputBox.Size = UDim2.new(0, 30, 0, 20)
        inputBox.Position = UDim2.new(0, 25, 0, 5)
        inputBox.BackgroundColor3 = currentTheme and currentTheme.ButtonBackground or Color3.fromRGB(28, 28, 28)
        inputBox.TextColor3 = currentTheme and currentTheme.TextColor or Color3.fromRGB(200, 50, 50)
        inputBox.TextSize = 14
        inputBox.Font = Enum.Font.Code
        inputBox.Text = math.floor(default[key] * 255)
        inputBox.Parent = inputFrame

        local inputStroke = Instance.new("UIStroke")
        inputStroke.Thickness = 1
        inputStroke.Color = currentTheme and currentTheme.BorderColor or Color3.fromRGB(200, 50, 50)
        inputStroke.Parent = inputBox

        return inputBox
    end

    local rInput = createRGBInput("R", 0, "R")
    local gInput = createRGBInput("G", 70, "G")
    local bInput = createRGBInput("B", 140, "B")

    -- Initialisation de la couleur
    local configKey = tab.Name .. "_" .. section.Name .. "_" .. name .. "_ColorPicker"
    local currentColor = default
    if config[configKey] then
        currentColor = Color3.new(config[configKey].R, config[configKey].G, config[configKey].B)
        colorPreview.BackgroundColor3 = currentColor
    end

    local h, s, v = currentColor:ToHSV()
    svPicker.BackgroundColor3 = Color3.fromHSV(h, 1, 1)
    svGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromHSV(h, 1, 1))
    })
    svCursor.Position = UDim2.new(s, -5, 1 - v, -5)
    hueCursor.Position = UDim2.new(0, 0, h, -3)
    rInput.Text = tostring(math.floor(currentColor.R * 255))
    gInput.Text = tostring(math.floor(currentColor.G * 255))
    bInput.Text = tostring(math.floor(currentColor.B * 255))

    local function updateColor(hue, sat, val, fromRGB)
        local color = Color3.fromHSV(hue, sat, val)
        colorPreview.BackgroundColor3 = color
        svPicker.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
        svGradient.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
            ColorSequenceKeypoint.new(1, Color3.fromHSV(hue, 1, 1))
        })
        svCursor.Position = UDim2.new(sat, -5, 1 - val, -5)
        hueCursor.Position = UDim2.new(0, 0, hue, -3)
        if not fromRGB then
            rInput.Text = tostring(math.floor(color.R * 255))
            gInput.Text = tostring(math.floor(color.G * 255))
            bInput.Text = tostring(math.floor(color.B * 255))
        end
        config[configKey] = {R = color.R, G = color.G, B = color.B}
        saveConfig()
        callback(color)
    end

    -- Gestion des champs RGB
    local function updateFromRGB()
        local r = tonumber(rInput.Text) or 0
        local g = tonumber(gInput.Text) or 0
        local b = tonumber(bInput.Text) or 0
        r = math.clamp(r, 0, 255) / 255
        g = math.clamp(g, 0, 255) / 255
        b = math.clamp(b, 0, 255) / 255
        local color = Color3.new(r, g, b)
        local newH, newS, newV = color:ToHSV()
        h, s, v = newH, newS, newV
        updateColor(h, s, v, true)
    end

    rInput.FocusLost:Connect(updateFromRGB)
    gInput.FocusLost:Connect(updateFromRGB)
    bInput.FocusLost:Connect(updateFromRGB)

    -- Gestion des interactions (souris et tactile)
    local draggingSV = false
    local draggingHue = false

    local function handleInput(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            return true
        end
        return false
    end

    svPicker.InputBegan:Connect(function(input)
        if handleInput(input) then
            draggingSV = true
            local mousePos = UserInputService:GetMouseLocation()
            local relativeX = (mousePos.X - svPicker.AbsolutePosition.X) / svPicker.AbsoluteSize.X
            local relativeY = (mousePos.Y - svPicker.AbsolutePosition.Y) / svPicker.AbsoluteSize.Y
            relativeX = math.clamp(relativeX, 0, 1)
            relativeY = math.clamp(relativeY, 0, 1)
            s, v = relativeX, 1 - relativeY
            updateColor(h, s, v)
        end
    end)

    svPicker.InputEnded:Connect(function(input)
        if handleInput(input) then
            draggingSV = false
        end
    end)

    hueBar.InputBegan:Connect(function(input)
        if handleInput(input) then
            draggingHue = true
            local mousePos = UserInputService:GetMouseLocation()
            local relativeY = (mousePos.Y - hueBar.AbsolutePosition.Y) / hueBar.AbsoluteSize.Y
            relativeY = math.clamp(relativeY, 0, 1)
            h = relativeY
            updateColor(h, s, v)
        end
    end)

    hueBar.InputEnded:Connect(function(input)
        if handleInput(input) then
            draggingHue = false
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            local mousePos = UserInputService:GetMouseLocation()
            if draggingSV then
                local relativeX = (mousePos.X - svPicker.AbsolutePosition.X) / svPicker.AbsoluteSize.X
                local relativeY = (mousePos.Y - svPicker.AbsolutePosition.Y) / svPicker.AbsoluteSize.Y
                relativeX = math.clamp(relativeX, 0, 1)
                relativeY = math.clamp(relativeY, 0, 1)
                s, v = relativeX, 1 - relativeY
                updateColor(h, s, v)
            elseif draggingHue then
                local relativeY = (mousePos.Y - hueBar.AbsolutePosition.Y) / hueBar.AbsoluteSize.Y
                relativeY = math.clamp(relativeY, 0, 1)
                h = relativeY
                updateColor(h, s, v)
            end
        end
    end)

    -- Toggle la fenêtre du ColorPicker
    colorPickerButton.MouseButton1Click:Connect(function()
        colorPickerWindow.Visible = not colorPickerWindow.Visible
        local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
        local tween = TweenService:Create(colorPickerWindow, tweenInfo, {Size = colorPickerWindow.Visible and UDim2.new(0, 220, 0, 220) or UDim2.new(0, 220, 0, 0)})
        tween:Play()
    end)

    -- Effets de survol
    colorPickerButton.MouseEnter:Connect(function()
        local hoverColor = currentTheme and currentTheme.TextHoverColor or Color3.fromRGB(220, 80, 80)
        local tweenHover = TweenService:Create(colorPreview, TweenInfo.new(0.2), {BackgroundColor3 = currentColor:Lerp(hoverColor, 0.2)})
        tweenHover:Play()
    end)

    colorPickerButton.MouseLeave:Connect(function()
        local tweenLeave = TweenService:Create(colorPreview, TweenInfo.new(0.2), {BackgroundColor3 = currentColor})
        tweenLeave:Play()
    end)
end

            return section
        end

        return tab
    end

    -- Profil du joueur
    local playerInfoFrame = Instance.new("Frame")
    playerInfoFrame.Size = UDim2.new(0, 198, 0, 60)
    playerInfoFrame.Position = UDim2.new(0, 0, 1, 0)
    playerInfoFrame.AnchorPoint = Vector2.new(0, 1)
    playerInfoFrame.BackgroundColor3 = currentTheme.TabBackground
    playerInfoFrame.BorderSizePixel = 0
    playerInfoFrame.Parent = mainFrame

    local playerInfoStroke = Instance.new("UIStroke")
    playerInfoStroke.Thickness = 2
    playerInfoStroke.Color = currentTheme.BorderColor
    playerInfoStroke.Parent = playerInfoFrame

    local playerIcon = Instance.new("ImageLabel")
    playerIcon.Size = UDim2.new(0, 40, 0, 40)
    playerIcon.Position = UDim2.new(0, 10, 0, 10)
    playerIcon.BackgroundTransparency = 1
    playerIcon.Image = player and "rbxthumb://type=AvatarHeadShot&id=" .. player.UserId .. "&w=420&h=420" or ""
    playerIcon.ClipsDescendants = true
    playerIcon.Parent = playerInfoFrame

    -- Effet de cercle
    local iconCircle = Instance.new("UICorner")
    iconCircle.CornerRadius = UDim.new(0.5, 0)
    iconCircle.Parent = playerIcon

    local playerName = Instance.new("TextLabel")
    playerName.Size = UDim2.new(0, 180, 0, 40)
    playerName.Position = UDim2.new(0, 55, 0, 10)
    playerName.BackgroundTransparency = 1
    playerName.Text = player and player.Name or "#ERROR_UNKNOW_404"
    playerName.TextColor3 = currentTheme.TextColor
    playerName.TextSize = 16
    playerName.Font = Enum.Font.Code
    playerName.TextXAlignment = Enum.TextXAlignment.Left
    playerName.TextTruncate = Enum.TextTruncate.AtEnd
    playerName.Parent = playerInfoFrame

    return XyloKitUIWindow
end

-- Renvoyer la table XyloKitUI
return XyloKitUI
